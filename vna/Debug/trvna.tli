// Created by Microsoft (R) C/C++ Compiler Version 14.27.29111.0 (055af3fb).
//
// C:\Users\hsyn\Desktop\SoftRoles\trvna-com\vna\Debug\trvna.tli
//
// Wrapper implementations for Win32 type library C:\VNA\TRVNA\TRVNA.exe
// compiler-generated file created 12/11/20 at 21:19:58 - DO NOT EDIT!

#pragma once

//
// interface ISCPI_CALCulate_PARameter wrapper method implementations
//

inline long ISCPI_CALCulate_PARameter::GetCOUNt ( ) {
    long _result = 0;
    HRESULT _hr = get_COUNt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_PARameter::PutCOUNt ( long Value ) {
    HRESULT _hr = put_COUNt(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISCPI_CALCulate_PARameter::GetDEFine ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DEFine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISCPI_CALCulate_PARameter::PutDEFine ( _bstr_t Value ) {
    HRESULT _hr = put_DEFine(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT ISCPI_CALCulate_PARameter::SELect ( ) {
    HRESULT _hr = raw_SELect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long ISCPI_CALCulate_PARameter::GetSPORt ( ) {
    long _result = 0;
    HRESULT _hr = get_SPORt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_PARameter::PutSPORt ( long Value ) {
    HRESULT _hr = put_SPORt(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_CALCulate_SELected_DATA wrapper method implementations
//

inline _variant_t ISCPI_CALCulate_SELected_DATA::GetFDATa ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_FDATa(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ISCPI_CALCulate_SELected_DATA::PutFDATa ( const _variant_t & Value ) {
    HRESULT _hr = put_FDATa(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ISCPI_CALCulate_SELected_DATA::GetFMEMory ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_FMEMory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ISCPI_CALCulate_SELected_DATA::PutFMEMory ( const _variant_t & Value ) {
    HRESULT _hr = put_FMEMory(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ISCPI_CALCulate_SELected_DATA::GetSDATa ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SDATa(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ISCPI_CALCulate_SELected_DATA::PutSDATa ( const _variant_t & Value ) {
    HRESULT _hr = put_SDATa(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ISCPI_CALCulate_SELected_DATA::GetSMEMory ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SMEMory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ISCPI_CALCulate_SELected_DATA::PutSMEMory ( const _variant_t & Value ) {
    HRESULT _hr = put_SMEMory(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_CALCulate_SELected_LIMit_DISPlay wrapper method implementations
//

inline VARIANT_BOOL ISCPI_CALCulate_SELected_LIMit_DISPlay::GetSTATe ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_STATe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_SELected_LIMit_DISPlay::PutSTATe ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_STATe(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_CALCulate_SELected_MARKer_BWIDth wrapper method implementations
//

inline _variant_t ISCPI_CALCulate_SELected_MARKer_BWIDth::GetDATA ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DATA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL ISCPI_CALCulate_SELected_MARKer_BWIDth::GetSTATe ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_STATe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_SELected_MARKer_BWIDth::PutSTATe ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_STATe(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ISCPI_CALCulate_SELected_MARKer_BWIDth::GetTHReshold ( ) {
    double _result = 0;
    HRESULT _hr = get_THReshold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_SELected_MARKer_BWIDth::PutTHReshold ( double Value ) {
    HRESULT _hr = put_THReshold(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISCPI_CALCulate_SELected_MARKer_BWIDth::GetTYPE ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TYPE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISCPI_CALCulate_SELected_MARKer_BWIDth::PutTYPE ( _bstr_t Value ) {
    HRESULT _hr = put_TYPE(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISCPI_CALCulate_SELected_MARKer_BWIDth::GetREFerence ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_REFerence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISCPI_CALCulate_SELected_MARKer_BWIDth::PutREFerence ( _bstr_t Value ) {
    HRESULT _hr = put_REFerence(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_CALCulate_SELected_MARKer_REFerence wrapper method implementations
//

inline VARIANT_BOOL ISCPI_CALCulate_SELected_MARKer_REFerence::GetSTATe ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_STATe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_SELected_MARKer_REFerence::PutSTATe ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_STATe(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_CALCulate_SELected_MARKer_FUNCtion_DOMain wrapper method implementations
//

inline double ISCPI_CALCulate_SELected_MARKer_FUNCtion_DOMain::GetSTARt ( ) {
    double _result = 0;
    HRESULT _hr = get_STARt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_SELected_MARKer_FUNCtion_DOMain::PutSTARt ( double Value ) {
    HRESULT _hr = put_STARt(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISCPI_CALCulate_SELected_MARKer_FUNCtion_DOMain::GetSTATe ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_STATe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_SELected_MARKer_FUNCtion_DOMain::PutSTATe ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_STATe(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ISCPI_CALCulate_SELected_MARKer_FUNCtion_DOMain::GetSTOP ( ) {
    double _result = 0;
    HRESULT _hr = get_STOP(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_SELected_MARKer_FUNCtion_DOMain::PutSTOP ( double Value ) {
    HRESULT _hr = put_STOP(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISCPI_CALCulate_SELected_MARKer_FUNCtion_DOMain::GetCOUPle ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_COUPle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_SELected_MARKer_FUNCtion_DOMain::PutCOUPle ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_COUPle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_CALCulate_SELected_MARKer_FUNCtion wrapper method implementations
//

inline ISCPI_CALCulate_SELected_MARKer_FUNCtion_DOMainPtr ISCPI_CALCulate_SELected_MARKer_FUNCtion::GetDOMain ( ) {
    struct ISCPI_CALCulate_SELected_MARKer_FUNCtion_DOMain * _result = 0;
    HRESULT _hr = get_DOMain(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_CALCulate_SELected_MARKer_FUNCtion_DOMainPtr(_result, false);
}

inline HRESULT ISCPI_CALCulate_SELected_MARKer_FUNCtion::EXECute ( ) {
    HRESULT _hr = raw_EXECute();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double ISCPI_CALCulate_SELected_MARKer_FUNCtion::GetPEXCursion ( ) {
    double _result = 0;
    HRESULT _hr = get_PEXCursion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_SELected_MARKer_FUNCtion::PutPEXCursion ( double Value ) {
    HRESULT _hr = put_PEXCursion(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISCPI_CALCulate_SELected_MARKer_FUNCtion::GetPPOLarity ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PPOLarity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISCPI_CALCulate_SELected_MARKer_FUNCtion::PutPPOLarity ( _bstr_t Value ) {
    HRESULT _hr = put_PPOLarity(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ISCPI_CALCulate_SELected_MARKer_FUNCtion::GetTARGet ( ) {
    double _result = 0;
    HRESULT _hr = get_TARGet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_SELected_MARKer_FUNCtion::PutTARGet ( double Value ) {
    HRESULT _hr = put_TARGet(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISCPI_CALCulate_SELected_MARKer_FUNCtion::GetTRACking ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TRACking(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_SELected_MARKer_FUNCtion::PutTRACking ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_TRACking(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISCPI_CALCulate_SELected_MARKer_FUNCtion::GetTTRansition ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TTRansition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISCPI_CALCulate_SELected_MARKer_FUNCtion::PutTTRansition ( _bstr_t Value ) {
    HRESULT _hr = put_TTRansition(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISCPI_CALCulate_SELected_MARKer_FUNCtion::GetTYPE ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TYPE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISCPI_CALCulate_SELected_MARKer_FUNCtion::PutTYPE ( _bstr_t Value ) {
    HRESULT _hr = put_TYPE(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_CALCulate_SELected_MARKer wrapper method implementations
//

inline HRESULT ISCPI_CALCulate_SELected_MARKer::ACTivate ( ) {
    HRESULT _hr = raw_ACTivate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ISCPI_CALCulate_SELected_MARKer_BWIDthPtr ISCPI_CALCulate_SELected_MARKer::GetBWIDth ( ) {
    struct ISCPI_CALCulate_SELected_MARKer_BWIDth * _result = 0;
    HRESULT _hr = get_BWIDth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_CALCulate_SELected_MARKer_BWIDthPtr(_result, false);
}

inline VARIANT_BOOL ISCPI_CALCulate_SELected_MARKer::GetCOUPle ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_COUPle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_SELected_MARKer::PutCOUPle ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_COUPle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ISCPI_CALCulate_SELected_MARKer_REFerencePtr ISCPI_CALCulate_SELected_MARKer::GetREFerence ( ) {
    struct ISCPI_CALCulate_SELected_MARKer_REFerence * _result = 0;
    HRESULT _hr = get_REFerence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_CALCulate_SELected_MARKer_REFerencePtr(_result, false);
}

inline VARIANT_BOOL ISCPI_CALCulate_SELected_MARKer::GetSTATe ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_STATe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_SELected_MARKer::PutSTATe ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_STATe(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ISCPI_CALCulate_SELected_MARKer::GetX ( ) {
    double _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_SELected_MARKer::PutX ( double Value ) {
    HRESULT _hr = put_X(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ISCPI_CALCulate_SELected_MARKer::GetY ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline ISCPI_CALCulate_SELected_MARKer_FUNCtionPtr ISCPI_CALCulate_SELected_MARKer::GetFUNCtion ( ) {
    struct ISCPI_CALCulate_SELected_MARKer_FUNCtion * _result = 0;
    HRESULT _hr = get_FUNCtion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_CALCulate_SELected_MARKer_FUNCtionPtr(_result, false);
}

inline void ISCPI_CALCulate_SELected_MARKer::PutSET_ ( _bstr_t _arg1 ) {
    HRESULT _hr = put_SET_(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISCPI_CALCulate_SELected_MARKer::GetCOUNt ( ) {
    long _result = 0;
    HRESULT _hr = get_COUNt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_SELected_MARKer::PutCOUNt ( long Value ) {
    HRESULT _hr = put_COUNt(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_CALCulate_SELected_MATH wrapper method implementations
//

inline _bstr_t ISCPI_CALCulate_SELected_MATH::GetFUNCtion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FUNCtion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISCPI_CALCulate_SELected_MATH::PutFUNCtion ( _bstr_t Value ) {
    HRESULT _hr = put_FUNCtion(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT ISCPI_CALCulate_SELected_MATH::MEMorize ( ) {
    HRESULT _hr = raw_MEMorize();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISCPI_CALCulate_SELected_MATH::DELete ( ) {
    HRESULT _hr = raw_DELete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ISCPI_CALCulate_SELected_SMOothing wrapper method implementations
//

inline double ISCPI_CALCulate_SELected_SMOothing::GetAPERture ( ) {
    double _result = 0;
    HRESULT _hr = get_APERture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_SELected_SMOothing::PutAPERture ( double Value ) {
    HRESULT _hr = put_APERture(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISCPI_CALCulate_SELected_SMOothing::GetSTATe ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_STATe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_SELected_SMOothing::PutSTATe ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_STATe(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_DISPlay_WINDow_TRACe_Y_SCALe wrapper method implementations
//

inline HRESULT ISCPI_DISPlay_WINDow_TRACe_Y_SCALe::AUTO ( ) {
    HRESULT _hr = raw_AUTO();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double ISCPI_DISPlay_WINDow_TRACe_Y_SCALe::GetPDIVision ( ) {
    double _result = 0;
    HRESULT _hr = get_PDIVision(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_DISPlay_WINDow_TRACe_Y_SCALe::PutPDIVision ( double Value ) {
    HRESULT _hr = put_PDIVision(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ISCPI_DISPlay_WINDow_TRACe_Y_SCALe::GetRLEVel ( ) {
    double _result = 0;
    HRESULT _hr = get_RLEVel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_DISPlay_WINDow_TRACe_Y_SCALe::PutRLEVel ( double Value ) {
    HRESULT _hr = put_RLEVel(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISCPI_DISPlay_WINDow_TRACe_Y_SCALe::GetRPOSition ( ) {
    long _result = 0;
    HRESULT _hr = get_RPOSition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_DISPlay_WINDow_TRACe_Y_SCALe::PutRPOSition ( long Value ) {
    HRESULT _hr = put_RPOSition(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_DISPlay_WINDow_TRACe_Y wrapper method implementations
//

inline ISCPI_DISPlay_WINDow_TRACe_Y_SCALePtr ISCPI_DISPlay_WINDow_TRACe_Y::GetSCALe ( ) {
    struct ISCPI_DISPlay_WINDow_TRACe_Y_SCALe * _result = 0;
    HRESULT _hr = get_SCALe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_DISPlay_WINDow_TRACe_Y_SCALePtr(_result, false);
}

//
// interface ISCPI_IEEE4882 wrapper method implementations
//

inline _bstr_t ISCPI_IEEE4882::GetIDN ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IDN(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT ISCPI_IEEE4882::RST ( ) {
    HRESULT _hr = raw_RST();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISCPI_IEEE4882::TRG ( ) {
    HRESULT _hr = raw_TRG();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISCPI_IEEE4882::WAI ( ) {
    HRESULT _hr = raw_WAI();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISCPI_IEEE4882::CLS ( ) {
    HRESULT _hr = raw_CLS();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ISCPI_INITiate wrapper method implementations
//

inline VARIANT_BOOL ISCPI_INITiate::GetCONTinuous ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CONTinuous(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_INITiate::PutCONTinuous ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_CONTinuous(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT ISCPI_INITiate::IMMediate ( ) {
    HRESULT _hr = raw_IMMediate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ISCPI_SENSe_AVERage wrapper method implementations
//

inline HRESULT ISCPI_SENSe_AVERage::CLEar ( ) {
    HRESULT _hr = raw_CLEar();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long ISCPI_SENSe_AVERage::GetCOUNt ( ) {
    long _result = 0;
    HRESULT _hr = get_COUNt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_AVERage::PutCOUNt ( long Value ) {
    HRESULT _hr = put_COUNt(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISCPI_SENSe_AVERage::GetSTATe ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_STATe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_AVERage::PutSTATe ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_STATe(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISCPI_SENSe_AVERage::GetCURRent ( ) {
    long _result = 0;
    HRESULT _hr = get_CURRent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISCPI_SENSe_BANDwidth wrapper method implementations
//

inline double ISCPI_SENSe_BANDwidth::GetRESolution ( ) {
    double _result = 0;
    HRESULT _hr = get_RESolution(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_BANDwidth::PutRESolution ( double Value ) {
    HRESULT _hr = put_RESolution(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_SENSe_FREQuency wrapper method implementations
//

inline double ISCPI_SENSe_FREQuency::GetCENTer ( ) {
    double _result = 0;
    HRESULT _hr = get_CENTer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_FREQuency::PutCENTer ( double Value ) {
    HRESULT _hr = put_CENTer(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ISCPI_SENSe_FREQuency::GetCW ( ) {
    double _result = 0;
    HRESULT _hr = get_CW(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_FREQuency::PutCW ( double Value ) {
    HRESULT _hr = put_CW(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ISCPI_SENSe_FREQuency::GetDATA ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DATA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double ISCPI_SENSe_FREQuency::GetSPAN ( ) {
    double _result = 0;
    HRESULT _hr = get_SPAN(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_FREQuency::PutSPAN ( double Value ) {
    HRESULT _hr = put_SPAN(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ISCPI_SENSe_FREQuency::GetSTARt ( ) {
    double _result = 0;
    HRESULT _hr = get_STARt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_FREQuency::PutSTARt ( double Value ) {
    HRESULT _hr = put_STARt(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ISCPI_SENSe_FREQuency::GetSTOP ( ) {
    double _result = 0;
    HRESULT _hr = get_STOP(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_FREQuency::PutSTOP ( double Value ) {
    HRESULT _hr = put_STOP(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_SENSe_SEGMent wrapper method implementations
//

inline _variant_t ISCPI_SENSe_SEGMent::GetDATA ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DATA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ISCPI_SENSe_SEGMent::PutDATA ( const _variant_t & Value ) {
    HRESULT _hr = put_DATA(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_SOURce_POWer_LEVel_IMMediate wrapper method implementations
//

inline double ISCPI_SOURce_POWer_LEVel_IMMediate::GetAMPLitude ( ) {
    double _result = 0;
    HRESULT _hr = get_AMPLitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SOURce_POWer_LEVel_IMMediate::PutAMPLitude ( double Value ) {
    HRESULT _hr = put_AMPLitude(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_SOURce_POWer_LEVel_SLOPe wrapper method implementations
//

inline double ISCPI_SOURce_POWer_LEVel_SLOPe::GetDATA ( ) {
    double _result = 0;
    HRESULT _hr = get_DATA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SOURce_POWer_LEVel_SLOPe::PutDATA ( double Value ) {
    HRESULT _hr = put_DATA(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_SOURce_POWer_LEVel wrapper method implementations
//

inline ISCPI_SOURce_POWer_LEVel_IMMediatePtr ISCPI_SOURce_POWer_LEVel::GetIMMediate ( ) {
    struct ISCPI_SOURce_POWer_LEVel_IMMediate * _result = 0;
    HRESULT _hr = get_IMMediate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SOURce_POWer_LEVel_IMMediatePtr(_result, false);
}

inline ISCPI_SOURce_POWer_LEVel_SLOPePtr ISCPI_SOURce_POWer_LEVel::GetSLOPe ( ) {
    struct ISCPI_SOURce_POWer_LEVel_SLOPe * _result = 0;
    HRESULT _hr = get_SLOPe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SOURce_POWer_LEVel_SLOPePtr(_result, false);
}

//
// interface IStateObserver wrapper method implementations
//

inline HRESULT IStateObserver::Advise ( IUnknown * pUnk ) {
    HRESULT _hr = raw_Advise(pUnk);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IStateObserver::Unadvise ( ) {
    HRESULT _hr = raw_Unadvise();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IStateObserverEvents wrapper method implementations
//

inline HRESULT IStateObserverEvents::OnStateChange ( long Vaue ) {
    HRESULT _hr = raw_OnStateChange(Vaue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ISCPI_STATus_OPERation wrapper method implementations
//

inline long ISCPI_STATus_OPERation::GetCONDition ( ) {
    long _result = 0;
    HRESULT _hr = get_CONDition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long ISCPI_STATus_OPERation::GetENABle ( ) {
    long _result = 0;
    HRESULT _hr = get_ENABle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_STATus_OPERation::PutENABle ( long Value ) {
    HRESULT _hr = put_ENABle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISCPI_STATus_OPERation::GetEVENt ( ) {
    long _result = 0;
    HRESULT _hr = get_EVENt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long ISCPI_STATus_OPERation::GetNTRansition ( ) {
    long _result = 0;
    HRESULT _hr = get_NTRansition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_STATus_OPERation::PutNTRansition ( long Value ) {
    HRESULT _hr = put_NTRansition(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISCPI_STATus_OPERation::GetPTRansition ( ) {
    long _result = 0;
    HRESULT _hr = get_PTRansition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_STATus_OPERation::PutPTRansition ( long Value ) {
    HRESULT _hr = put_PTRansition(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_STATus_QUEStionable_LIMit_CHANnel wrapper method implementations
//

inline long ISCPI_STATus_QUEStionable_LIMit_CHANnel::GetCONDition ( ) {
    long _result = 0;
    HRESULT _hr = get_CONDition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long ISCPI_STATus_QUEStionable_LIMit_CHANnel::GetENABle ( ) {
    long _result = 0;
    HRESULT _hr = get_ENABle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_STATus_QUEStionable_LIMit_CHANnel::PutENABle ( long Value ) {
    HRESULT _hr = put_ENABle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISCPI_STATus_QUEStionable_LIMit_CHANnel::GetEVENt ( ) {
    long _result = 0;
    HRESULT _hr = get_EVENt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long ISCPI_STATus_QUEStionable_LIMit_CHANnel::GetNTRansition ( ) {
    long _result = 0;
    HRESULT _hr = get_NTRansition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_STATus_QUEStionable_LIMit_CHANnel::PutNTRansition ( long Value ) {
    HRESULT _hr = put_NTRansition(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISCPI_STATus_QUEStionable_LIMit_CHANnel::GetPTRansition ( ) {
    long _result = 0;
    HRESULT _hr = get_PTRansition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_STATus_QUEStionable_LIMit_CHANnel::PutPTRansition ( long Value ) {
    HRESULT _hr = put_PTRansition(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_STATus_QUEStionable_LIMit wrapper method implementations
//

inline long ISCPI_STATus_QUEStionable_LIMit::GetCONDition ( ) {
    long _result = 0;
    HRESULT _hr = get_CONDition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long ISCPI_STATus_QUEStionable_LIMit::GetENABle ( ) {
    long _result = 0;
    HRESULT _hr = get_ENABle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_STATus_QUEStionable_LIMit::PutENABle ( long Value ) {
    HRESULT _hr = put_ENABle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISCPI_STATus_QUEStionable_LIMit::GetNTRansition ( ) {
    long _result = 0;
    HRESULT _hr = get_NTRansition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_STATus_QUEStionable_LIMit::PutNTRansition ( long Value ) {
    HRESULT _hr = put_NTRansition(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISCPI_STATus_QUEStionable_LIMit::GetPTRansition ( ) {
    long _result = 0;
    HRESULT _hr = get_PTRansition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_STATus_QUEStionable_LIMit::PutPTRansition ( long Value ) {
    HRESULT _hr = put_PTRansition(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISCPI_STATus_QUEStionable_LIMit::GetEVENt ( ) {
    long _result = 0;
    HRESULT _hr = get_EVENt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ISCPI_STATus_QUEStionable_LIMit_CHANnelPtr ISCPI_STATus_QUEStionable_LIMit::GetCHANnel ( long Ch ) {
    struct ISCPI_STATus_QUEStionable_LIMit_CHANnel * _result = 0;
    HRESULT _hr = get_CHANnel(Ch, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_STATus_QUEStionable_LIMit_CHANnelPtr(_result, false);
}

//
// interface ISCPI_SENSe_CORRection_COLLect_ACQuire wrapper method implementations
//

inline void ISCPI_SENSe_CORRection_COLLect_ACQuire::PutISOLation ( const _variant_t & _arg1 ) {
    HRESULT _hr = put_ISOLation(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void ISCPI_SENSe_CORRection_COLLect_ACQuire::PutLOAD ( long _arg1 ) {
    HRESULT _hr = put_LOAD(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void ISCPI_SENSe_CORRection_COLLect_ACQuire::PutOPEN ( long _arg1 ) {
    HRESULT _hr = put_OPEN(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void ISCPI_SENSe_CORRection_COLLect_ACQuire::PutSHORt ( long _arg1 ) {
    HRESULT _hr = put_SHORt(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void ISCPI_SENSe_CORRection_COLLect_ACQuire::PutTHRU ( const _variant_t & _arg1 ) {
    HRESULT _hr = put_THRU(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_SENSe_CORRection_COLLect_CKIT_ORDer wrapper method implementations
//

inline long ISCPI_SENSe_CORRection_COLLect_CKIT_ORDer::GetLOAD ( long Cpt ) {
    long _result = 0;
    HRESULT _hr = get_LOAD(Cpt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_CORRection_COLLect_CKIT_ORDer::PutLOAD ( long Cpt, long Value ) {
    HRESULT _hr = put_LOAD(Cpt, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISCPI_SENSe_CORRection_COLLect_CKIT_ORDer::GetOPEN ( long Cpt ) {
    long _result = 0;
    HRESULT _hr = get_OPEN(Cpt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_CORRection_COLLect_CKIT_ORDer::PutOPEN ( long Cpt, long Value ) {
    HRESULT _hr = put_OPEN(Cpt, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISCPI_SENSe_CORRection_COLLect_CKIT_ORDer::GetSHORt ( long Cpt ) {
    long _result = 0;
    HRESULT _hr = get_SHORt(Cpt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_CORRection_COLLect_CKIT_ORDer::PutSHORt ( long Cpt, long Value ) {
    HRESULT _hr = put_SHORt(Cpt, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISCPI_SENSe_CORRection_COLLect_CKIT_ORDer::GetTHRU ( long Cpt_m, long Cpt_n ) {
    long _result = 0;
    HRESULT _hr = get_THRU(Cpt_m, Cpt_n, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_CORRection_COLLect_CKIT_ORDer::PutTHRU ( long Cpt_m, long Cpt_n, long Value ) {
    HRESULT _hr = put_THRU(Cpt_m, Cpt_n, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_OUTPut wrapper method implementations
//

inline VARIANT_BOOL ISCPI_OUTPut::GetSTATe ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_STATe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_OUTPut::PutSTATe ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_STATe(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_DISPlay_WINDow_Y_SCALe wrapper method implementations
//

inline long ISCPI_DISPlay_WINDow_Y_SCALe::GetDIVisions ( ) {
    long _result = 0;
    HRESULT _hr = get_DIVisions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_DISPlay_WINDow_Y_SCALe::PutDIVisions ( long Value ) {
    HRESULT _hr = put_DIVisions(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_DISPlay_WINDow_Y wrapper method implementations
//

inline ISCPI_DISPlay_WINDow_Y_SCALePtr ISCPI_DISPlay_WINDow_Y::GetSCALe ( ) {
    struct ISCPI_DISPlay_WINDow_Y_SCALe * _result = 0;
    HRESULT _hr = get_SCALe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_DISPlay_WINDow_Y_SCALePtr(_result, false);
}

//
// interface ISCPI_CALCulate_SELected_RLIMit_DISPlay wrapper method implementations
//

inline VARIANT_BOOL ISCPI_CALCulate_SELected_RLIMit_DISPlay::GetLINE ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LINE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_SELected_RLIMit_DISPlay::PutLINE ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_LINE(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISCPI_CALCulate_SELected_RLIMit_DISPlay::GetSELect ( ) {
    long _result = 0;
    HRESULT _hr = get_SELect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_SELected_RLIMit_DISPlay::PutSELect ( long Value ) {
    HRESULT _hr = put_SELect(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISCPI_CALCulate_SELected_RLIMit_DISPlay::GetValue ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISCPI_CALCulate_SELected_RLIMit_DISPlay::PutValue ( _bstr_t Value ) {
    HRESULT _hr = put_Value(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_CALCulate_SELected_RLIMit_REPort wrapper method implementations
//

inline _variant_t ISCPI_CALCulate_SELected_RLIMit_REPort::GetDATA ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DATA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface ISCPI_CALCulate_SELected_RLIMit wrapper method implementations
//

inline _variant_t ISCPI_CALCulate_SELected_RLIMit::GetDATA ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DATA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ISCPI_CALCulate_SELected_RLIMit::PutDATA ( const _variant_t & Value ) {
    HRESULT _hr = put_DATA(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ISCPI_CALCulate_SELected_RLIMit_DISPlayPtr ISCPI_CALCulate_SELected_RLIMit::GetDISPlay ( ) {
    struct ISCPI_CALCulate_SELected_RLIMit_DISPlay * _result = 0;
    HRESULT _hr = get_DISPlay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_CALCulate_SELected_RLIMit_DISPlayPtr(_result, false);
}

inline VARIANT_BOOL ISCPI_CALCulate_SELected_RLIMit::GetFAIL ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FAIL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ISCPI_CALCulate_SELected_RLIMit_REPortPtr ISCPI_CALCulate_SELected_RLIMit::GetREPort ( ) {
    struct ISCPI_CALCulate_SELected_RLIMit_REPort * _result = 0;
    HRESULT _hr = get_REPort(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_CALCulate_SELected_RLIMit_REPortPtr(_result, false);
}

inline VARIANT_BOOL ISCPI_CALCulate_SELected_RLIMit::GetSTATe ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_STATe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_SELected_RLIMit::PutSTATe ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_STATe(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_STATus_QUEStionable_RLIMit_CHANnel wrapper method implementations
//

inline long ISCPI_STATus_QUEStionable_RLIMit_CHANnel::GetCONDition ( ) {
    long _result = 0;
    HRESULT _hr = get_CONDition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long ISCPI_STATus_QUEStionable_RLIMit_CHANnel::GetENABle ( ) {
    long _result = 0;
    HRESULT _hr = get_ENABle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_STATus_QUEStionable_RLIMit_CHANnel::PutENABle ( long Value ) {
    HRESULT _hr = put_ENABle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISCPI_STATus_QUEStionable_RLIMit_CHANnel::GetEVENt ( ) {
    long _result = 0;
    HRESULT _hr = get_EVENt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long ISCPI_STATus_QUEStionable_RLIMit_CHANnel::GetNTRansition ( ) {
    long _result = 0;
    HRESULT _hr = get_NTRansition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_STATus_QUEStionable_RLIMit_CHANnel::PutNTRansition ( long Value ) {
    HRESULT _hr = put_NTRansition(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISCPI_STATus_QUEStionable_RLIMit_CHANnel::GetPTRansition ( ) {
    long _result = 0;
    HRESULT _hr = get_PTRansition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_STATus_QUEStionable_RLIMit_CHANnel::PutPTRansition ( long Value ) {
    HRESULT _hr = put_PTRansition(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_STATus_QUEStionable_RLIMit wrapper method implementations
//

inline long ISCPI_STATus_QUEStionable_RLIMit::GetCONDition ( ) {
    long _result = 0;
    HRESULT _hr = get_CONDition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long ISCPI_STATus_QUEStionable_RLIMit::GetENABle ( ) {
    long _result = 0;
    HRESULT _hr = get_ENABle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_STATus_QUEStionable_RLIMit::PutENABle ( long Value ) {
    HRESULT _hr = put_ENABle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISCPI_STATus_QUEStionable_RLIMit::GetNTRansition ( ) {
    long _result = 0;
    HRESULT _hr = get_NTRansition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_STATus_QUEStionable_RLIMit::PutNTRansition ( long Value ) {
    HRESULT _hr = put_NTRansition(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISCPI_STATus_QUEStionable_RLIMit::GetPTRansition ( ) {
    long _result = 0;
    HRESULT _hr = get_PTRansition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_STATus_QUEStionable_RLIMit::PutPTRansition ( long Value ) {
    HRESULT _hr = put_PTRansition(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISCPI_STATus_QUEStionable_RLIMit::GetEVENt ( ) {
    long _result = 0;
    HRESULT _hr = get_EVENt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ISCPI_STATus_QUEStionable_RLIMit_CHANnelPtr ISCPI_STATus_QUEStionable_RLIMit::GetCHANnel ( long Ch ) {
    struct ISCPI_STATus_QUEStionable_RLIMit_CHANnel * _result = 0;
    HRESULT _hr = get_CHANnel(Ch, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_STATus_QUEStionable_RLIMit_CHANnelPtr(_result, false);
}

//
// interface ISCPI_STATus_QUEStionable wrapper method implementations
//

inline long ISCPI_STATus_QUEStionable::GetCONDition ( ) {
    long _result = 0;
    HRESULT _hr = get_CONDition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long ISCPI_STATus_QUEStionable::GetENABle ( ) {
    long _result = 0;
    HRESULT _hr = get_ENABle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_STATus_QUEStionable::PutENABle ( long Value ) {
    HRESULT _hr = put_ENABle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISCPI_STATus_QUEStionable::GetEVENt ( ) {
    long _result = 0;
    HRESULT _hr = get_EVENt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long ISCPI_STATus_QUEStionable::GetNTRansition ( ) {
    long _result = 0;
    HRESULT _hr = get_NTRansition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_STATus_QUEStionable::PutNTRansition ( long Value ) {
    HRESULT _hr = put_NTRansition(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISCPI_STATus_QUEStionable::GetPTRansition ( ) {
    long _result = 0;
    HRESULT _hr = get_PTRansition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_STATus_QUEStionable::PutPTRansition ( long Value ) {
    HRESULT _hr = put_PTRansition(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ISCPI_STATus_QUEStionable_LIMitPtr ISCPI_STATus_QUEStionable::GetLIMit ( ) {
    struct ISCPI_STATus_QUEStionable_LIMit * _result = 0;
    HRESULT _hr = get_LIMit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_STATus_QUEStionable_LIMitPtr(_result, false);
}

inline ISCPI_STATus_QUEStionable_RLIMitPtr ISCPI_STATus_QUEStionable::GetRLIMit ( ) {
    struct ISCPI_STATus_QUEStionable_RLIMit * _result = 0;
    HRESULT _hr = get_RLIMit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_STATus_QUEStionable_RLIMitPtr(_result, false);
}

//
// interface ISCPI_STATus wrapper method implementations
//

inline HRESULT ISCPI_STATus::PRESet ( ) {
    HRESULT _hr = raw_PRESet();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ISCPI_STATus_OPERationPtr ISCPI_STATus::GetOPERation ( ) {
    struct ISCPI_STATus_OPERation * _result = 0;
    HRESULT _hr = get_OPERation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_STATus_OPERationPtr(_result, false);
}

inline ISCPI_STATus_QUEStionablePtr ISCPI_STATus::GetQUEStionable ( ) {
    struct ISCPI_STATus_QUEStionable * _result = 0;
    HRESULT _hr = get_QUEStionable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_STATus_QUEStionablePtr(_result, false);
}

//
// interface ISCPI_SENSe_CORRection_COLLect_METHod_RESPonse wrapper method implementations
//

inline void ISCPI_SENSe_CORRection_COLLect_METHod_RESPonse::PutOPEN ( long _arg1 ) {
    HRESULT _hr = put_OPEN(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void ISCPI_SENSe_CORRection_COLLect_METHod_RESPonse::PutSHORt ( long _arg1 ) {
    HRESULT _hr = put_SHORt(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void ISCPI_SENSe_CORRection_COLLect_METHod_RESPonse::PutTHRU ( const _variant_t & _arg1 ) {
    HRESULT _hr = put_THRU(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_SENSe_CORRection_COLLect_METHod wrapper method implementations
//

inline ISCPI_SENSe_CORRection_COLLect_METHod_RESPonsePtr ISCPI_SENSe_CORRection_COLLect_METHod::GetRESPonse ( ) {
    struct ISCPI_SENSe_CORRection_COLLect_METHod_RESPonse * _result = 0;
    HRESULT _hr = get_RESPonse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SENSe_CORRection_COLLect_METHod_RESPonsePtr(_result, false);
}

inline void ISCPI_SENSe_CORRection_COLLect_METHod::PutERESponse ( const _variant_t & _arg1 ) {
    HRESULT _hr = put_ERESponse(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void ISCPI_SENSe_CORRection_COLLect_METHod::PutSOLT1 ( long _arg1 ) {
    HRESULT _hr = put_SOLT1(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void ISCPI_SENSe_CORRection_COLLect_METHod::PutSOLT2 ( const _variant_t & _arg1 ) {
    HRESULT _hr = put_SOLT2(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISCPI_SENSe_CORRection_COLLect_METHod::GetTYPE ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TYPE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface ISCPI_SENSe_CORRection_COLLect_CKIT_STAN wrapper method implementations
//

inline double ISCPI_SENSe_CORRection_COLLect_CKIT_STAN::GetARBitrary ( ) {
    double _result = 0;
    HRESULT _hr = get_ARBitrary(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_CORRection_COLLect_CKIT_STAN::PutARBitrary ( double Value ) {
    HRESULT _hr = put_ARBitrary(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ISCPI_SENSe_CORRection_COLLect_CKIT_STAN::GetC0 ( ) {
    double _result = 0;
    HRESULT _hr = get_C0(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_CORRection_COLLect_CKIT_STAN::PutC0 ( double Value ) {
    HRESULT _hr = put_C0(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ISCPI_SENSe_CORRection_COLLect_CKIT_STAN::GetC1 ( ) {
    double _result = 0;
    HRESULT _hr = get_C1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_CORRection_COLLect_CKIT_STAN::PutC1 ( double Value ) {
    HRESULT _hr = put_C1(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ISCPI_SENSe_CORRection_COLLect_CKIT_STAN::GetC2 ( ) {
    double _result = 0;
    HRESULT _hr = get_C2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_CORRection_COLLect_CKIT_STAN::PutC2 ( double Value ) {
    HRESULT _hr = put_C2(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ISCPI_SENSe_CORRection_COLLect_CKIT_STAN::GetC3 ( ) {
    double _result = 0;
    HRESULT _hr = get_C3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_CORRection_COLLect_CKIT_STAN::PutC3 ( double Value ) {
    HRESULT _hr = put_C3(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ISCPI_SENSe_CORRection_COLLect_CKIT_STAN::GetDelay ( ) {
    double _result = 0;
    HRESULT _hr = get_Delay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_CORRection_COLLect_CKIT_STAN::PutDelay ( double Value ) {
    HRESULT _hr = put_Delay(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ISCPI_SENSe_CORRection_COLLect_CKIT_STAN::GetL0 ( ) {
    double _result = 0;
    HRESULT _hr = get_L0(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_CORRection_COLLect_CKIT_STAN::PutL0 ( double Value ) {
    HRESULT _hr = put_L0(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ISCPI_SENSe_CORRection_COLLect_CKIT_STAN::GetL1 ( ) {
    double _result = 0;
    HRESULT _hr = get_L1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_CORRection_COLLect_CKIT_STAN::PutL1 ( double Value ) {
    HRESULT _hr = put_L1(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ISCPI_SENSe_CORRection_COLLect_CKIT_STAN::GetL2 ( ) {
    double _result = 0;
    HRESULT _hr = get_L2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_CORRection_COLLect_CKIT_STAN::PutL2 ( double Value ) {
    HRESULT _hr = put_L2(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ISCPI_SENSe_CORRection_COLLect_CKIT_STAN::GetL3 ( ) {
    double _result = 0;
    HRESULT _hr = get_L3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_CORRection_COLLect_CKIT_STAN::PutL3 ( double Value ) {
    HRESULT _hr = put_L3(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISCPI_SENSe_CORRection_COLLect_CKIT_STAN::GetLABel ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LABel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISCPI_SENSe_CORRection_COLLect_CKIT_STAN::PutLABel ( _bstr_t Value ) {
    HRESULT _hr = put_LABel(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ISCPI_SENSe_CORRection_COLLect_CKIT_STAN::GetLOSS ( ) {
    double _result = 0;
    HRESULT _hr = get_LOSS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_CORRection_COLLect_CKIT_STAN::PutLOSS ( double Value ) {
    HRESULT _hr = put_LOSS(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISCPI_SENSe_CORRection_COLLect_CKIT_STAN::GetTYPE ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TYPE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISCPI_SENSe_CORRection_COLLect_CKIT_STAN::PutTYPE ( _bstr_t Value ) {
    HRESULT _hr = put_TYPE(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ISCPI_SENSe_CORRection_COLLect_CKIT_STAN::GetZ0 ( ) {
    double _result = 0;
    HRESULT _hr = get_Z0(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_CORRection_COLLect_CKIT_STAN::PutZ0 ( double Value ) {
    HRESULT _hr = put_Z0(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_SENSe_CORRection_COLLect_CKIT wrapper method implementations
//

inline ISCPI_SENSe_CORRection_COLLect_CKIT_ORDerPtr ISCPI_SENSe_CORRection_COLLect_CKIT::GetORDer ( ) {
    struct ISCPI_SENSe_CORRection_COLLect_CKIT_ORDer * _result = 0;
    HRESULT _hr = get_ORDer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SENSe_CORRection_COLLect_CKIT_ORDerPtr(_result, false);
}

inline _bstr_t ISCPI_SENSe_CORRection_COLLect_CKIT::GetLABel ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LABel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISCPI_SENSe_CORRection_COLLect_CKIT::PutLABel ( _bstr_t Value ) {
    HRESULT _hr = put_LABel(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT ISCPI_SENSe_CORRection_COLLect_CKIT::RESet ( ) {
    HRESULT _hr = raw_RESet();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long ISCPI_SENSe_CORRection_COLLect_CKIT::GetSELect ( ) {
    long _result = 0;
    HRESULT _hr = get_SELect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_CORRection_COLLect_CKIT::PutSELect ( long Value ) {
    HRESULT _hr = put_SELect(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ISCPI_SENSe_CORRection_COLLect_CKIT_STANPtr ISCPI_SENSe_CORRection_COLLect_CKIT::GetSTAN ( long Std ) {
    struct ISCPI_SENSe_CORRection_COLLect_CKIT_STAN * _result = 0;
    HRESULT _hr = get_STAN(Std, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SENSe_CORRection_COLLect_CKIT_STANPtr(_result, false);
}

//
// interface ISCPI_SENSe_CORRection_IMPedance_INPut wrapper method implementations
//

inline double ISCPI_SENSe_CORRection_IMPedance_INPut::GetMAGNitude ( ) {
    double _result = 0;
    HRESULT _hr = get_MAGNitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_CORRection_IMPedance_INPut::PutMAGNitude ( double Value ) {
    HRESULT _hr = put_MAGNitude(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_SENSe_CORRection_IMPedance wrapper method implementations
//

inline ISCPI_SENSe_CORRection_IMPedance_INPutPtr ISCPI_SENSe_CORRection_IMPedance::GetINPut ( ) {
    struct ISCPI_SENSe_CORRection_IMPedance_INPut * _result = 0;
    HRESULT _hr = get_INPut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SENSe_CORRection_IMPedance_INPutPtr(_result, false);
}

//
// interface ISCPI_SENSe_CORRection_EXTension_PORT_INCLude wrapper method implementations
//

inline VARIANT_BOOL ISCPI_SENSe_CORRection_EXTension_PORT_INCLude::GetSTATe ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_STATe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_CORRection_EXTension_PORT_INCLude::PutSTATe ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_STATe(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_SENSe_CORRection_EXTension_PORT wrapper method implementations
//

inline double ISCPI_SENSe_CORRection_EXTension_PORT::GetTIME ( ) {
    double _result = 0;
    HRESULT _hr = get_TIME(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_CORRection_EXTension_PORT::PutTIME ( double Value ) {
    HRESULT _hr = put_TIME(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ISCPI_SENSe_CORRection_EXTension_PORT_INCLudePtr ISCPI_SENSe_CORRection_EXTension_PORT::GetINCLude ( long Il ) {
    struct ISCPI_SENSe_CORRection_EXTension_PORT_INCLude * _result = 0;
    HRESULT _hr = get_INCLude(Il, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SENSe_CORRection_EXTension_PORT_INCLudePtr(_result, false);
}

inline double ISCPI_SENSe_CORRection_EXTension_PORT::GetLDC ( ) {
    double _result = 0;
    HRESULT _hr = get_LDC(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_CORRection_EXTension_PORT::PutLDC ( double Value ) {
    HRESULT _hr = put_LDC(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ISCPI_SENSe_CORRection_EXTension_PORT::GetLOSS ( long Ls ) {
    double _result = 0;
    HRESULT _hr = get_LOSS(Ls, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_CORRection_EXTension_PORT::PutLOSS ( long Ls, double Value ) {
    HRESULT _hr = put_LOSS(Ls, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ISCPI_SENSe_CORRection_EXTension_PORT::GetFREQuency ( long Fq ) {
    double _result = 0;
    HRESULT _hr = get_FREQuency(Fq, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_CORRection_EXTension_PORT::PutFREQuency ( long Fq, double Value ) {
    HRESULT _hr = put_FREQuency(Fq, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_SENSe_CORRection_RECeiver_COLLect wrapper method implementations
//

inline void ISCPI_SENSe_CORRection_RECeiver_COLLect::PutACQuire ( long _arg1 ) {
    HRESULT _hr = put_ACQuire(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_SENSe_CORRection_RECeiver wrapper method implementations
//

inline ISCPI_SENSe_CORRection_RECeiver_COLLectPtr ISCPI_SENSe_CORRection_RECeiver::GetCOLLect ( ) {
    struct ISCPI_SENSe_CORRection_RECeiver_COLLect * _result = 0;
    HRESULT _hr = get_COLLect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SENSe_CORRection_RECeiver_COLLectPtr(_result, false);
}

inline VARIANT_BOOL ISCPI_SENSe_CORRection_RECeiver::GetSTATe ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_STATe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_CORRection_RECeiver::PutSTATe ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_STATe(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_SENSe_CORRection_COEFficient_METHod_RESPonse wrapper method implementations
//

inline void ISCPI_SENSe_CORRection_COEFficient_METHod_RESPonse::PutOPEN ( long _arg1 ) {
    HRESULT _hr = put_OPEN(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void ISCPI_SENSe_CORRection_COEFficient_METHod_RESPonse::PutSHORt ( long _arg1 ) {
    HRESULT _hr = put_SHORt(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void ISCPI_SENSe_CORRection_COEFficient_METHod_RESPonse::PutTHRU ( const _variant_t & _arg1 ) {
    HRESULT _hr = put_THRU(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_SENSe_CORRection_COEFficient_METHod wrapper method implementations
//

inline void ISCPI_SENSe_CORRection_COEFficient_METHod::PutERESponse ( const _variant_t & _arg1 ) {
    HRESULT _hr = put_ERESponse(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ISCPI_SENSe_CORRection_COEFficient_METHod_RESPonsePtr ISCPI_SENSe_CORRection_COEFficient_METHod::GetRESPonse ( ) {
    struct ISCPI_SENSe_CORRection_COEFficient_METHod_RESPonse * _result = 0;
    HRESULT _hr = get_RESPonse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SENSe_CORRection_COEFficient_METHod_RESPonsePtr(_result, false);
}

inline void ISCPI_SENSe_CORRection_COEFficient_METHod::PutSOLT1 ( long _arg1 ) {
    HRESULT _hr = put_SOLT1(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void ISCPI_SENSe_CORRection_COEFficient_METHod::PutSOLT2 ( const _variant_t & _arg1 ) {
    HRESULT _hr = put_SOLT2(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_SENSe_CORRection_COEFficient wrapper method implementations
//

inline _variant_t ISCPI_SENSe_CORRection_COEFficient::GetDATA ( _bstr_t Str, long Rpt, long Spt ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DATA(Str, Rpt, Spt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ISCPI_SENSe_CORRection_COEFficient::PutDATA ( _bstr_t Str, long Rpt, long Spt, const _variant_t & Value ) {
    HRESULT _hr = put_DATA(Str, Rpt, Spt, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ISCPI_SENSe_CORRection_COEFficient_METHodPtr ISCPI_SENSe_CORRection_COEFficient::GetMETHod ( ) {
    struct ISCPI_SENSe_CORRection_COEFficient_METHod * _result = 0;
    HRESULT _hr = get_METHod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SENSe_CORRection_COEFficient_METHodPtr(_result, false);
}

inline HRESULT ISCPI_SENSe_CORRection_COEFficient::SAVE ( ) {
    HRESULT _hr = raw_SAVE();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ISCPI_SENSe_CORRection_COLLect_DATA_THRU wrapper method implementations
//

inline _variant_t ISCPI_SENSe_CORRection_COLLect_DATA_THRU::GetMATCh ( long Rpt, long Spt ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MATCh(Rpt, Spt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ISCPI_SENSe_CORRection_COLLect_DATA_THRU::PutMATCh ( long Rpt, long Spt, const _variant_t & Value ) {
    HRESULT _hr = put_MATCh(Rpt, Spt, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ISCPI_SENSe_CORRection_COLLect_DATA_THRU::GetTRANsmission ( long Rpt, long Spt ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_TRANsmission(Rpt, Spt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ISCPI_SENSe_CORRection_COLLect_DATA_THRU::PutTRANsmission ( long Rpt, long Spt, const _variant_t & Value ) {
    HRESULT _hr = put_TRANsmission(Rpt, Spt, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_SENSe_CORRection_COLLect_DATA wrapper method implementations
//

inline _variant_t ISCPI_SENSe_CORRection_COLLect_DATA::GetISOLation ( long Rpt, long Spt ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ISOLation(Rpt, Spt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ISCPI_SENSe_CORRection_COLLect_DATA::PutISOLation ( long Rpt, long Spt, const _variant_t & Value ) {
    HRESULT _hr = put_ISOLation(Rpt, Spt, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ISCPI_SENSe_CORRection_COLLect_DATA::GetLOAD ( long Pt ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LOAD(Pt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ISCPI_SENSe_CORRection_COLLect_DATA::PutLOAD ( long Pt, const _variant_t & Value ) {
    HRESULT _hr = put_LOAD(Pt, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ISCPI_SENSe_CORRection_COLLect_DATA::GetOPEN ( long Pt ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_OPEN(Pt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ISCPI_SENSe_CORRection_COLLect_DATA::PutOPEN ( long Pt, const _variant_t & Value ) {
    HRESULT _hr = put_OPEN(Pt, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ISCPI_SENSe_CORRection_COLLect_DATA::GetSHORt ( long Pt ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SHORt(Pt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ISCPI_SENSe_CORRection_COLLect_DATA::PutSHORt ( long Pt, const _variant_t & Value ) {
    HRESULT _hr = put_SHORt(Pt, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ISCPI_SENSe_CORRection_COLLect_DATA_THRUPtr ISCPI_SENSe_CORRection_COLLect_DATA::GetTHRU ( ) {
    struct ISCPI_SENSe_CORRection_COLLect_DATA_THRU * _result = 0;
    HRESULT _hr = get_THRU(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SENSe_CORRection_COLLect_DATA_THRUPtr(_result, false);
}

//
// interface ISCPI_DISPlay_UPDate wrapper method implementations
//

inline HRESULT ISCPI_DISPlay_UPDate::IMMediate ( ) {
    HRESULT _hr = raw_IMMediate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ISCPI_CALCulate_SELected_CORRection_EDELay wrapper method implementations
//

inline double ISCPI_CALCulate_SELected_CORRection_EDELay::GetTIME ( ) {
    double _result = 0;
    HRESULT _hr = get_TIME(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_SELected_CORRection_EDELay::PutTIME ( double Value ) {
    HRESULT _hr = put_TIME(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_CALCulate_SELected_CORRection_OFFSet wrapper method implementations
//

inline double ISCPI_CALCulate_SELected_CORRection_OFFSet::GetPHASe ( ) {
    double _result = 0;
    HRESULT _hr = get_PHASe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_SELected_CORRection_OFFSet::PutPHASe ( double Value ) {
    HRESULT _hr = put_PHASe(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_CALCulate_SELected_CORRection wrapper method implementations
//

inline ISCPI_CALCulate_SELected_CORRection_EDELayPtr ISCPI_CALCulate_SELected_CORRection::GetEDELay ( ) {
    struct ISCPI_CALCulate_SELected_CORRection_EDELay * _result = 0;
    HRESULT _hr = get_EDELay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_CALCulate_SELected_CORRection_EDELayPtr(_result, false);
}

inline ISCPI_CALCulate_SELected_CORRection_OFFSetPtr ISCPI_CALCulate_SELected_CORRection::GetOFFSet ( ) {
    struct ISCPI_CALCulate_SELected_CORRection_OFFSet * _result = 0;
    HRESULT _hr = get_OFFSet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_CALCulate_SELected_CORRection_OFFSetPtr(_result, false);
}

//
// interface ISCPI_DISPlay_WINDow_TRACe_MEMory wrapper method implementations
//

inline VARIANT_BOOL ISCPI_DISPlay_WINDow_TRACe_MEMory::GetSTATe ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_STATe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_DISPlay_WINDow_TRACe_MEMory::PutSTATe ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_STATe(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_DISPlay_WINDow_TRACe_ANNotation_MARKer_POSition wrapper method implementations
//

inline double ISCPI_DISPlay_WINDow_TRACe_ANNotation_MARKer_POSition::GetX ( ) {
    double _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_DISPlay_WINDow_TRACe_ANNotation_MARKer_POSition::PutX ( double Value ) {
    HRESULT _hr = put_X(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ISCPI_DISPlay_WINDow_TRACe_ANNotation_MARKer_POSition::GetY ( ) {
    double _result = 0;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_DISPlay_WINDow_TRACe_ANNotation_MARKer_POSition::PutY ( double Value ) {
    HRESULT _hr = put_Y(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_DISPlay_WINDow_TRACe_ANNotation_MARKer wrapper method implementations
//

inline ISCPI_DISPlay_WINDow_TRACe_ANNotation_MARKer_POSitionPtr ISCPI_DISPlay_WINDow_TRACe_ANNotation_MARKer::GetPOSition ( ) {
    struct ISCPI_DISPlay_WINDow_TRACe_ANNotation_MARKer_POSition * _result = 0;
    HRESULT _hr = get_POSition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_DISPlay_WINDow_TRACe_ANNotation_MARKer_POSitionPtr(_result, false);
}

inline VARIANT_BOOL ISCPI_DISPlay_WINDow_TRACe_ANNotation_MARKer::GetMEMory ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MEMory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_DISPlay_WINDow_TRACe_ANNotation_MARKer::PutMEMory ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_MEMory(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_DISPlay_WINDow_TRACe_ANNotation wrapper method implementations
//

inline ISCPI_DISPlay_WINDow_TRACe_ANNotation_MARKerPtr ISCPI_DISPlay_WINDow_TRACe_ANNotation::GetMARKer ( ) {
    struct ISCPI_DISPlay_WINDow_TRACe_ANNotation_MARKer * _result = 0;
    HRESULT _hr = get_MARKer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_DISPlay_WINDow_TRACe_ANNotation_MARKerPtr(_result, false);
}

//
// interface ISCPI_DISPlay_WINDow_TRACe wrapper method implementations
//

inline ISCPI_DISPlay_WINDow_TRACe_YPtr ISCPI_DISPlay_WINDow_TRACe::GetY ( ) {
    struct ISCPI_DISPlay_WINDow_TRACe_Y * _result = 0;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_DISPlay_WINDow_TRACe_YPtr(_result, false);
}

inline VARIANT_BOOL ISCPI_DISPlay_WINDow_TRACe::GetSTATe ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_STATe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_DISPlay_WINDow_TRACe::PutSTATe ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_STATe(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ISCPI_DISPlay_WINDow_TRACe_MEMoryPtr ISCPI_DISPlay_WINDow_TRACe::GetMEMory ( ) {
    struct ISCPI_DISPlay_WINDow_TRACe_MEMory * _result = 0;
    HRESULT _hr = get_MEMory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_DISPlay_WINDow_TRACe_MEMoryPtr(_result, false);
}

inline ISCPI_DISPlay_WINDow_TRACe_ANNotationPtr ISCPI_DISPlay_WINDow_TRACe::GetANNotation ( ) {
    struct ISCPI_DISPlay_WINDow_TRACe_ANNotation * _result = 0;
    HRESULT _hr = get_ANNotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_DISPlay_WINDow_TRACe_ANNotationPtr(_result, false);
}

//
// interface ISCPI_SYSTem_BEEPer_COMPlete wrapper method implementations
//

inline HRESULT ISCPI_SYSTem_BEEPer_COMPlete::IMMediate ( ) {
    HRESULT _hr = raw_IMMediate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL ISCPI_SYSTem_BEEPer_COMPlete::GetSTATe ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_STATe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SYSTem_BEEPer_COMPlete::PutSTATe ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_STATe(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_SYSTem_BEEPer_WARNing wrapper method implementations
//

inline HRESULT ISCPI_SYSTem_BEEPer_WARNing::IMMediate ( ) {
    HRESULT _hr = raw_IMMediate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL ISCPI_SYSTem_BEEPer_WARNing::GetSTATe ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_STATe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SYSTem_BEEPer_WARNing::PutSTATe ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_STATe(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_SYSTem_BEEPer wrapper method implementations
//

inline ISCPI_SYSTem_BEEPer_COMPletePtr ISCPI_SYSTem_BEEPer::GetCOMPlete ( ) {
    struct ISCPI_SYSTem_BEEPer_COMPlete * _result = 0;
    HRESULT _hr = get_COMPlete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SYSTem_BEEPer_COMPletePtr(_result, false);
}

inline ISCPI_SYSTem_BEEPer_WARNingPtr ISCPI_SYSTem_BEEPer::GetWARNing ( ) {
    struct ISCPI_SYSTem_BEEPer_WARNing * _result = 0;
    HRESULT _hr = get_WARNing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SYSTem_BEEPer_WARNingPtr(_result, false);
}

//
// interface ISCPI_CALCulate_SELected_CONVersion wrapper method implementations
//

inline _bstr_t ISCPI_CALCulate_SELected_CONVersion::GetFUNCtion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FUNCtion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISCPI_CALCulate_SELected_CONVersion::PutFUNCtion ( _bstr_t Value ) {
    HRESULT _hr = put_FUNCtion(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISCPI_CALCulate_SELected_CONVersion::GetSTATe ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_STATe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_SELected_CONVersion::PutSTATe ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_STATe(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_CALCulate_SELected_FILTer_GATE_TIME wrapper method implementations
//

inline double ISCPI_CALCulate_SELected_FILTer_GATE_TIME::GetCENTer ( ) {
    double _result = 0;
    HRESULT _hr = get_CENTer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_SELected_FILTer_GATE_TIME::PutCENTer ( double Value ) {
    HRESULT _hr = put_CENTer(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISCPI_CALCulate_SELected_FILTer_GATE_TIME::GetSHAPe ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SHAPe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISCPI_CALCulate_SELected_FILTer_GATE_TIME::PutSHAPe ( _bstr_t Value ) {
    HRESULT _hr = put_SHAPe(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ISCPI_CALCulate_SELected_FILTer_GATE_TIME::GetSPAN ( ) {
    double _result = 0;
    HRESULT _hr = get_SPAN(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_SELected_FILTer_GATE_TIME::PutSPAN ( double Value ) {
    HRESULT _hr = put_SPAN(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ISCPI_CALCulate_SELected_FILTer_GATE_TIME::GetSTARt ( ) {
    double _result = 0;
    HRESULT _hr = get_STARt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_SELected_FILTer_GATE_TIME::PutSTARt ( double Value ) {
    HRESULT _hr = put_STARt(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISCPI_CALCulate_SELected_FILTer_GATE_TIME::GetSTATe ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_STATe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_SELected_FILTer_GATE_TIME::PutSTATe ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_STATe(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ISCPI_CALCulate_SELected_FILTer_GATE_TIME::GetSTOP ( ) {
    double _result = 0;
    HRESULT _hr = get_STOP(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_SELected_FILTer_GATE_TIME::PutSTOP ( double Value ) {
    HRESULT _hr = put_STOP(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISCPI_CALCulate_SELected_FILTer_GATE_TIME::GetTYPE ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TYPE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISCPI_CALCulate_SELected_FILTer_GATE_TIME::PutTYPE ( _bstr_t Value ) {
    HRESULT _hr = put_TYPE(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_CALCulate_SELected_FILTer_GATE wrapper method implementations
//

inline ISCPI_CALCulate_SELected_FILTer_GATE_TIMEPtr ISCPI_CALCulate_SELected_FILTer_GATE::GetTIME ( ) {
    struct ISCPI_CALCulate_SELected_FILTer_GATE_TIME * _result = 0;
    HRESULT _hr = get_TIME(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_CALCulate_SELected_FILTer_GATE_TIMEPtr(_result, false);
}

//
// interface ISCPI_CALCulate_SELected_FILTer wrapper method implementations
//

inline ISCPI_CALCulate_SELected_FILTer_GATEPtr ISCPI_CALCulate_SELected_FILTer::GetGATE ( ) {
    struct ISCPI_CALCulate_SELected_FILTer_GATE * _result = 0;
    HRESULT _hr = get_GATE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_CALCulate_SELected_FILTer_GATEPtr(_result, false);
}

//
// interface ISCPI_CALCulate_FSIMulator_SENDed_DEEMbed_PORT_USER wrapper method implementations
//

inline _bstr_t ISCPI_CALCulate_FSIMulator_SENDed_DEEMbed_PORT_USER::GetFILename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FILename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISCPI_CALCulate_FSIMulator_SENDed_DEEMbed_PORT_USER::PutFILename ( _bstr_t Value ) {
    HRESULT _hr = put_FILename(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_CALCulate_FSIMulator_SENDed_DEEMbed_PORT wrapper method implementations
//

inline ISCPI_CALCulate_FSIMulator_SENDed_DEEMbed_PORT_USERPtr ISCPI_CALCulate_FSIMulator_SENDed_DEEMbed_PORT::GetUSER ( ) {
    struct ISCPI_CALCulate_FSIMulator_SENDed_DEEMbed_PORT_USER * _result = 0;
    HRESULT _hr = get_USER(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_CALCulate_FSIMulator_SENDed_DEEMbed_PORT_USERPtr(_result, false);
}

inline VARIANT_BOOL ISCPI_CALCulate_FSIMulator_SENDed_DEEMbed_PORT::GetSTATe ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_STATe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_FSIMulator_SENDed_DEEMbed_PORT::PutSTATe ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_STATe(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_CALCulate_FSIMulator_SENDed_DEEMbed wrapper method implementations
//

inline ISCPI_CALCulate_FSIMulator_SENDed_DEEMbed_PORTPtr ISCPI_CALCulate_FSIMulator_SENDed_DEEMbed::GetPORT ( long Pt ) {
    struct ISCPI_CALCulate_FSIMulator_SENDed_DEEMbed_PORT * _result = 0;
    HRESULT _hr = get_PORT(Pt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_CALCulate_FSIMulator_SENDed_DEEMbed_PORTPtr(_result, false);
}

//
// interface ISCPI_CALCulate_FSIMulator_SENDed_PMCircuit_PORT_USER wrapper method implementations
//

inline _bstr_t ISCPI_CALCulate_FSIMulator_SENDed_PMCircuit_PORT_USER::GetFILename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FILename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISCPI_CALCulate_FSIMulator_SENDed_PMCircuit_PORT_USER::PutFILename ( _bstr_t Value ) {
    HRESULT _hr = put_FILename(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_CALCulate_FSIMulator_SENDed_PMCircuit_PORT wrapper method implementations
//

inline ISCPI_CALCulate_FSIMulator_SENDed_PMCircuit_PORT_USERPtr ISCPI_CALCulate_FSIMulator_SENDed_PMCircuit_PORT::GetUSER ( ) {
    struct ISCPI_CALCulate_FSIMulator_SENDed_PMCircuit_PORT_USER * _result = 0;
    HRESULT _hr = get_USER(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_CALCulate_FSIMulator_SENDed_PMCircuit_PORT_USERPtr(_result, false);
}

inline VARIANT_BOOL ISCPI_CALCulate_FSIMulator_SENDed_PMCircuit_PORT::GetSTATe ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_STATe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_FSIMulator_SENDed_PMCircuit_PORT::PutSTATe ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_STATe(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_CALCulate_FSIMulator_SENDed_PMCircuit wrapper method implementations
//

inline ISCPI_CALCulate_FSIMulator_SENDed_PMCircuit_PORTPtr ISCPI_CALCulate_FSIMulator_SENDed_PMCircuit::GetPORT ( long Pt ) {
    struct ISCPI_CALCulate_FSIMulator_SENDed_PMCircuit_PORT * _result = 0;
    HRESULT _hr = get_PORT(Pt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_CALCulate_FSIMulator_SENDed_PMCircuit_PORTPtr(_result, false);
}

//
// interface ISCPI_CALCulate_FSIMulator_SENDed_ZCONversion_PORT_Z0 wrapper method implementations
//

inline double ISCPI_CALCulate_FSIMulator_SENDed_ZCONversion_PORT_Z0::GetR ( ) {
    double _result = 0;
    HRESULT _hr = get_R(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_FSIMulator_SENDed_ZCONversion_PORT_Z0::PutR ( double Value ) {
    HRESULT _hr = put_R(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_CALCulate_FSIMulator_SENDed_ZCONversion_PORT wrapper method implementations
//

inline ISCPI_CALCulate_FSIMulator_SENDed_ZCONversion_PORT_Z0Ptr ISCPI_CALCulate_FSIMulator_SENDed_ZCONversion_PORT::GetZ0 ( ) {
    struct ISCPI_CALCulate_FSIMulator_SENDed_ZCONversion_PORT_Z0 * _result = 0;
    HRESULT _hr = get_Z0(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_CALCulate_FSIMulator_SENDed_ZCONversion_PORT_Z0Ptr(_result, false);
}

//
// interface ISCPI_CALCulate_FSIMulator_SENDed_ZCONversion wrapper method implementations
//

inline VARIANT_BOOL ISCPI_CALCulate_FSIMulator_SENDed_ZCONversion::GetSTATe ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_STATe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_FSIMulator_SENDed_ZCONversion::PutSTATe ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_STATe(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ISCPI_CALCulate_FSIMulator_SENDed_ZCONversion_PORTPtr ISCPI_CALCulate_FSIMulator_SENDed_ZCONversion::GetPORT ( long Pt ) {
    struct ISCPI_CALCulate_FSIMulator_SENDed_ZCONversion_PORT * _result = 0;
    HRESULT _hr = get_PORT(Pt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_CALCulate_FSIMulator_SENDed_ZCONversion_PORTPtr(_result, false);
}

//
// interface ISCPI_CALCulate_FSIMulator_SENDed wrapper method implementations
//

inline ISCPI_CALCulate_FSIMulator_SENDed_DEEMbedPtr ISCPI_CALCulate_FSIMulator_SENDed::GetDEEMbed ( ) {
    struct ISCPI_CALCulate_FSIMulator_SENDed_DEEMbed * _result = 0;
    HRESULT _hr = get_DEEMbed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_CALCulate_FSIMulator_SENDed_DEEMbedPtr(_result, false);
}

inline ISCPI_CALCulate_FSIMulator_SENDed_PMCircuitPtr ISCPI_CALCulate_FSIMulator_SENDed::GetPMCircuit ( ) {
    struct ISCPI_CALCulate_FSIMulator_SENDed_PMCircuit * _result = 0;
    HRESULT _hr = get_PMCircuit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_CALCulate_FSIMulator_SENDed_PMCircuitPtr(_result, false);
}

inline ISCPI_CALCulate_FSIMulator_SENDed_ZCONversionPtr ISCPI_CALCulate_FSIMulator_SENDed::GetZCONversion ( ) {
    struct ISCPI_CALCulate_FSIMulator_SENDed_ZCONversion * _result = 0;
    HRESULT _hr = get_ZCONversion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_CALCulate_FSIMulator_SENDed_ZCONversionPtr(_result, false);
}

//
// interface ISCPI_CALCulate_FSIMulator wrapper method implementations
//

inline ISCPI_CALCulate_FSIMulator_SENDedPtr ISCPI_CALCulate_FSIMulator::GetSENDed ( ) {
    struct ISCPI_CALCulate_FSIMulator_SENDed * _result = 0;
    HRESULT _hr = get_SENDed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_CALCulate_FSIMulator_SENDedPtr(_result, false);
}

//
// interface ISCPI_CALCulate_SELected_FUNCtion_DOMain wrapper method implementations
//

inline VARIANT_BOOL ISCPI_CALCulate_SELected_FUNCtion_DOMain::GetCOUPle ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_COUPle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_SELected_FUNCtion_DOMain::PutCOUPle ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_COUPle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ISCPI_CALCulate_SELected_FUNCtion_DOMain::GetSTARt ( ) {
    double _result = 0;
    HRESULT _hr = get_STARt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_SELected_FUNCtion_DOMain::PutSTARt ( double Value ) {
    HRESULT _hr = put_STARt(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISCPI_CALCulate_SELected_FUNCtion_DOMain::GetSTATe ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_STATe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_SELected_FUNCtion_DOMain::PutSTATe ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_STATe(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ISCPI_CALCulate_SELected_FUNCtion_DOMain::GetSTOP ( ) {
    double _result = 0;
    HRESULT _hr = get_STOP(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_SELected_FUNCtion_DOMain::PutSTOP ( double Value ) {
    HRESULT _hr = put_STOP(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_CALCulate_SELected_FUNCtion wrapper method implementations
//

inline _variant_t ISCPI_CALCulate_SELected_FUNCtion::GetDATA ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DATA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline ISCPI_CALCulate_SELected_FUNCtion_DOMainPtr ISCPI_CALCulate_SELected_FUNCtion::GetDOMain ( ) {
    struct ISCPI_CALCulate_SELected_FUNCtion_DOMain * _result = 0;
    HRESULT _hr = get_DOMain(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_CALCulate_SELected_FUNCtion_DOMainPtr(_result, false);
}

inline HRESULT ISCPI_CALCulate_SELected_FUNCtion::EXECute ( ) {
    HRESULT _hr = raw_EXECute();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double ISCPI_CALCulate_SELected_FUNCtion::GetPEXCursion ( ) {
    double _result = 0;
    HRESULT _hr = get_PEXCursion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_SELected_FUNCtion::PutPEXCursion ( double Value ) {
    HRESULT _hr = put_PEXCursion(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISCPI_CALCulate_SELected_FUNCtion::GetPOINts ( ) {
    long _result = 0;
    HRESULT _hr = get_POINts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ISCPI_CALCulate_SELected_FUNCtion::GetPPOLarity ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PPOLarity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISCPI_CALCulate_SELected_FUNCtion::PutPPOLarity ( _bstr_t Value ) {
    HRESULT _hr = put_PPOLarity(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ISCPI_CALCulate_SELected_FUNCtion::GetTARGet ( ) {
    double _result = 0;
    HRESULT _hr = get_TARGet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_SELected_FUNCtion::PutTARGet ( double Value ) {
    HRESULT _hr = put_TARGet(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISCPI_CALCulate_SELected_FUNCtion::GetTTRansition ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TTRansition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISCPI_CALCulate_SELected_FUNCtion::PutTTRansition ( _bstr_t Value ) {
    HRESULT _hr = put_TTRansition(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISCPI_CALCulate_SELected_FUNCtion::GetTYPE ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TYPE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISCPI_CALCulate_SELected_FUNCtion::PutTYPE ( _bstr_t Value ) {
    HRESULT _hr = put_TYPE(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_CALCulate_SELected_LIMit_REPort wrapper method implementations
//

inline _variant_t ISCPI_CALCulate_SELected_LIMit_REPort::GetALL ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ALL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ISCPI_CALCulate_SELected_LIMit_REPort::GetDATA ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DATA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline long ISCPI_CALCulate_SELected_LIMit_REPort::GetPOINts ( ) {
    long _result = 0;
    HRESULT _hr = get_POINts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISCPI_CALCulate_SELected_LIMit_OFFSet wrapper method implementations
//

inline double ISCPI_CALCulate_SELected_LIMit_OFFSet::GetAMPLitude ( ) {
    double _result = 0;
    HRESULT _hr = get_AMPLitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_SELected_LIMit_OFFSet::PutAMPLitude ( double Value ) {
    HRESULT _hr = put_AMPLitude(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT ISCPI_CALCulate_SELected_LIMit_OFFSet::MARKer ( ) {
    HRESULT _hr = raw_MARKer();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double ISCPI_CALCulate_SELected_LIMit_OFFSet::GetSTIMulus ( ) {
    double _result = 0;
    HRESULT _hr = get_STIMulus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_SELected_LIMit_OFFSet::PutSTIMulus ( double Value ) {
    HRESULT _hr = put_STIMulus(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_CALCulate_SELected_LIMit wrapper method implementations
//

inline _variant_t ISCPI_CALCulate_SELected_LIMit::GetDATA ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DATA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ISCPI_CALCulate_SELected_LIMit::PutDATA ( const _variant_t & Value ) {
    HRESULT _hr = put_DATA(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISCPI_CALCulate_SELected_LIMit::GetFAIL ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FAIL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL ISCPI_CALCulate_SELected_LIMit::GetSTATe ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_STATe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_SELected_LIMit::PutSTATe ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_STATe(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ISCPI_CALCulate_SELected_LIMit_DISPlayPtr ISCPI_CALCulate_SELected_LIMit::GetDISPlay ( ) {
    struct ISCPI_CALCulate_SELected_LIMit_DISPlay * _result = 0;
    HRESULT _hr = get_DISPlay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_CALCulate_SELected_LIMit_DISPlayPtr(_result, false);
}

inline ISCPI_CALCulate_SELected_LIMit_REPortPtr ISCPI_CALCulate_SELected_LIMit::GetREPort ( ) {
    struct ISCPI_CALCulate_SELected_LIMit_REPort * _result = 0;
    HRESULT _hr = get_REPort(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_CALCulate_SELected_LIMit_REPortPtr(_result, false);
}

inline ISCPI_CALCulate_SELected_LIMit_OFFSetPtr ISCPI_CALCulate_SELected_LIMit::GetOFFSet ( ) {
    struct ISCPI_CALCulate_SELected_LIMit_OFFSet * _result = 0;
    HRESULT _hr = get_OFFSet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_CALCulate_SELected_LIMit_OFFSetPtr(_result, false);
}

//
// interface ISCPI_CALCulate_SELected_TRANsform_TIME_IMPulse wrapper method implementations
//

inline double ISCPI_CALCulate_SELected_TRANsform_TIME_IMPulse::GetWIDTh ( ) {
    double _result = 0;
    HRESULT _hr = get_WIDTh(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_SELected_TRANsform_TIME_IMPulse::PutWIDTh ( double Value ) {
    HRESULT _hr = put_WIDTh(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_CALCulate_SELected_TRANsform_TIME_STEP wrapper method implementations
//

inline double ISCPI_CALCulate_SELected_TRANsform_TIME_STEP::GetRTIMe ( ) {
    double _result = 0;
    HRESULT _hr = get_RTIMe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_SELected_TRANsform_TIME_STEP::PutRTIMe ( double Value ) {
    HRESULT _hr = put_RTIMe(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_DISPlay_COLor_TRACe wrapper method implementations
//

inline _variant_t ISCPI_DISPlay_COLor_TRACe::GetDATA ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DATA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ISCPI_DISPlay_COLor_TRACe::PutDATA ( const _variant_t & Value ) {
    HRESULT _hr = put_DATA(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ISCPI_DISPlay_COLor_TRACe::GetMEMory ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MEMory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ISCPI_DISPlay_COLor_TRACe::PutMEMory ( const _variant_t & Value ) {
    HRESULT _hr = put_MEMory(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_DISPlay_COLor wrapper method implementations
//

inline _variant_t ISCPI_DISPlay_COLor::GetBACK ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_BACK(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ISCPI_DISPlay_COLor::PutBACK ( const _variant_t & Value ) {
    HRESULT _hr = put_BACK(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ISCPI_DISPlay_COLor::GetGRATicule ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_GRATicule(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ISCPI_DISPlay_COLor::PutGRATicule ( const _variant_t & Value ) {
    HRESULT _hr = put_GRATicule(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT ISCPI_DISPlay_COLor::RESet ( ) {
    HRESULT _hr = raw_RESet();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ISCPI_DISPlay_COLor_TRACePtr ISCPI_DISPlay_COLor::GetTRACe ( long Tr ) {
    struct ISCPI_DISPlay_COLor_TRACe * _result = 0;
    HRESULT _hr = get_TRACe(Tr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_DISPlay_COLor_TRACePtr(_result, false);
}

//
// interface ISCPI_DISPlay_WINDow_TITLe wrapper method implementations
//

inline _bstr_t ISCPI_DISPlay_WINDow_TITLe::GetDATA ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DATA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISCPI_DISPlay_WINDow_TITLe::PutDATA ( _bstr_t Value ) {
    HRESULT _hr = put_DATA(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISCPI_DISPlay_WINDow_TITLe::GetSTATe ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_STATe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_DISPlay_WINDow_TITLe::PutSTATe ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_STATe(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_DISPlay_WINDow_X wrapper method implementations
//

inline _bstr_t ISCPI_DISPlay_WINDow_X::GetSPACing ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SPACing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISCPI_DISPlay_WINDow_X::PutSPACing ( _bstr_t Value ) {
    HRESULT _hr = put_SPACing(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_HCOPy_DATE wrapper method implementations
//

inline VARIANT_BOOL ISCPI_HCOPy_DATE::GetSTAMp ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_STAMp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_HCOPy_DATE::PutSTAMp ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_STAMp(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_HCOPy wrapper method implementations
//

inline HRESULT ISCPI_HCOPy::ABORt ( ) {
    HRESULT _hr = raw_ABORt();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t ISCPI_HCOPy::GetIMAGe ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAGe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISCPI_HCOPy::PutIMAGe ( _bstr_t Value ) {
    HRESULT _hr = put_IMAGe(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT ISCPI_HCOPy::IMMediate ( ) {
    HRESULT _hr = raw_IMMediate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t ISCPI_HCOPy::GetPAINt ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PAINt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISCPI_HCOPy::PutPAINt ( _bstr_t Value ) {
    HRESULT _hr = put_PAINt(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ISCPI_HCOPy_DATEPtr ISCPI_HCOPy::GetDATE ( ) {
    struct ISCPI_HCOPy_DATE * _result = 0;
    HRESULT _hr = get_DATE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_HCOPy_DATEPtr(_result, false);
}

//
// interface ISCPI_DISPlay_WINDow_ANNotation_MARKer_ALIGn wrapper method implementations
//

inline _bstr_t ISCPI_DISPlay_WINDow_ANNotation_MARKer_ALIGn::GetTYPE ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TYPE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISCPI_DISPlay_WINDow_ANNotation_MARKer_ALIGn::PutTYPE ( _bstr_t Value ) {
    HRESULT _hr = put_TYPE(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_DISPlay_WINDow_ANNotation_MARKer_SINGle wrapper method implementations
//

inline VARIANT_BOOL ISCPI_DISPlay_WINDow_ANNotation_MARKer_SINGle::GetSTATe ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_STATe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_DISPlay_WINDow_ANNotation_MARKer_SINGle::PutSTATe ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_STATe(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_DISPlay_WINDow_ANNotation_MARKer wrapper method implementations
//

inline ISCPI_DISPlay_WINDow_ANNotation_MARKer_ALIGnPtr ISCPI_DISPlay_WINDow_ANNotation_MARKer::GetALIGn ( ) {
    struct ISCPI_DISPlay_WINDow_ANNotation_MARKer_ALIGn * _result = 0;
    HRESULT _hr = get_ALIGn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_DISPlay_WINDow_ANNotation_MARKer_ALIGnPtr(_result, false);
}

inline ISCPI_DISPlay_WINDow_ANNotation_MARKer_SINGlePtr ISCPI_DISPlay_WINDow_ANNotation_MARKer::GetSINGle ( ) {
    struct ISCPI_DISPlay_WINDow_ANNotation_MARKer_SINGle * _result = 0;
    HRESULT _hr = get_SINGle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_DISPlay_WINDow_ANNotation_MARKer_SINGlePtr(_result, false);
}

//
// interface ISCPI_DISPlay_WINDow_ANNotation wrapper method implementations
//

inline ISCPI_DISPlay_WINDow_ANNotation_MARKerPtr ISCPI_DISPlay_WINDow_ANNotation::GetMARKer ( ) {
    struct ISCPI_DISPlay_WINDow_ANNotation_MARKer * _result = 0;
    HRESULT _hr = get_MARKer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_DISPlay_WINDow_ANNotation_MARKerPtr(_result, false);
}

//
// interface ISCPI_DISPlay_WINDow wrapper method implementations
//

inline HRESULT ISCPI_DISPlay_WINDow::ACTivate ( ) {
    HRESULT _hr = raw_ACTivate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long ISCPI_DISPlay_WINDow::GetSPLit ( ) {
    long _result = 0;
    HRESULT _hr = get_SPLit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_DISPlay_WINDow::PutSPLit ( long Value ) {
    HRESULT _hr = put_SPLit(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ISCPI_DISPlay_WINDow_TRACePtr ISCPI_DISPlay_WINDow::GetTRACe ( long Tr ) {
    struct ISCPI_DISPlay_WINDow_TRACe * _result = 0;
    HRESULT _hr = get_TRACe(Tr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_DISPlay_WINDow_TRACePtr(_result, false);
}

inline ISCPI_DISPlay_WINDow_YPtr ISCPI_DISPlay_WINDow::GetY ( ) {
    struct ISCPI_DISPlay_WINDow_Y * _result = 0;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_DISPlay_WINDow_YPtr(_result, false);
}

inline ISCPI_DISPlay_WINDow_TITLePtr ISCPI_DISPlay_WINDow::GetTITLe ( ) {
    struct ISCPI_DISPlay_WINDow_TITLe * _result = 0;
    HRESULT _hr = get_TITLe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_DISPlay_WINDow_TITLePtr(_result, false);
}

inline ISCPI_DISPlay_WINDow_XPtr ISCPI_DISPlay_WINDow::GetX ( ) {
    struct ISCPI_DISPlay_WINDow_X * _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_DISPlay_WINDow_XPtr(_result, false);
}

inline ISCPI_DISPlay_WINDow_ANNotationPtr ISCPI_DISPlay_WINDow::GetANNotation ( ) {
    struct ISCPI_DISPlay_WINDow_ANNotation * _result = 0;
    HRESULT _hr = get_ANNotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_DISPlay_WINDow_ANNotationPtr(_result, false);
}

inline VARIANT_BOOL ISCPI_DISPlay_WINDow::GetMAXimize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MAXimize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_DISPlay_WINDow::PutMAXimize ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_MAXimize(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_MMEMory_LOAD_CHANnel wrapper method implementations
//

inline void ISCPI_MMEMory_LOAD_CHANnel::PutSTATe ( _bstr_t _arg1 ) {
    HRESULT _hr = put_STATe(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_MMEMory_STORe_CHANnel wrapper method implementations
//

inline void ISCPI_MMEMory_STORe_CHANnel::PutSTATe ( _bstr_t _arg1 ) {
    HRESULT _hr = put_STATe(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT ISCPI_MMEMory_STORe_CHANnel::CLEar ( ) {
    HRESULT _hr = raw_CLEar();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ISCPI_MMEMory_STORe_SNP_TYPE wrapper method implementations
//

inline long ISCPI_MMEMory_STORe_SNP_TYPE::GetS1P ( ) {
    long _result = 0;
    HRESULT _hr = get_S1P(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_MMEMory_STORe_SNP_TYPE::PutS1P ( long Value ) {
    HRESULT _hr = put_S1P(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ISCPI_MMEMory_STORe_SNP_TYPE::GetS2P ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_S2P(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ISCPI_MMEMory_STORe_SNP_TYPE::PutS2P ( const _variant_t & Value ) {
    HRESULT _hr = put_S2P(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_MMEMory_STORe_SNP wrapper method implementations
//

inline void ISCPI_MMEMory_STORe_SNP::PutDATA ( _bstr_t _arg1 ) {
    HRESULT _hr = put_DATA(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISCPI_MMEMory_STORe_SNP::GetFORMat ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FORMat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISCPI_MMEMory_STORe_SNP::PutFORMat ( _bstr_t Value ) {
    HRESULT _hr = put_FORMat(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ISCPI_MMEMory_STORe_SNP_TYPEPtr ISCPI_MMEMory_STORe_SNP::GetTYPE ( ) {
    struct ISCPI_MMEMory_STORe_SNP_TYPE * _result = 0;
    HRESULT _hr = get_TYPE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_MMEMory_STORe_SNP_TYPEPtr(_result, false);
}

//
// interface ISCPI_MMEMory_STORe wrapper method implementations
//

inline void ISCPI_MMEMory_STORe::PutSTATe ( _bstr_t _arg1 ) {
    HRESULT _hr = put_STATe(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISCPI_MMEMory_STORe::GetSTYPe ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_STYPe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISCPI_MMEMory_STORe::PutSTYPe ( _bstr_t Param ) {
    HRESULT _hr = put_STYPe(Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void ISCPI_MMEMory_STORe::PutIMAGe ( _bstr_t _arg1 ) {
    HRESULT _hr = put_IMAGe(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ISCPI_MMEMory_STORe_CHANnelPtr ISCPI_MMEMory_STORe::GetCHANnel ( ) {
    struct ISCPI_MMEMory_STORe_CHANnel * _result = 0;
    HRESULT _hr = get_CHANnel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_MMEMory_STORe_CHANnelPtr(_result, false);
}

inline void ISCPI_MMEMory_STORe::PutLIMit ( _bstr_t _arg1 ) {
    HRESULT _hr = put_LIMit(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void ISCPI_MMEMory_STORe::PutRLIMit ( _bstr_t _arg1 ) {
    HRESULT _hr = put_RLIMit(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void ISCPI_MMEMory_STORe::PutSEGMent ( _bstr_t _arg1 ) {
    HRESULT _hr = put_SEGMent(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void ISCPI_MMEMory_STORe::PutFDATa ( _bstr_t _arg1 ) {
    HRESULT _hr = put_FDATa(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ISCPI_MMEMory_STORe_SNPPtr ISCPI_MMEMory_STORe::GetSNP ( ) {
    struct ISCPI_MMEMory_STORe_SNP * _result = 0;
    HRESULT _hr = get_SNP(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_MMEMory_STORe_SNPPtr(_result, false);
}

inline void ISCPI_MMEMory_STORe::PutCKIT ( long Ck, _bstr_t _arg2 ) {
    HRESULT _hr = put_CKIT(Ck, _arg2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void ISCPI_MMEMory_STORe::PutPLOSs ( long Pt, _bstr_t _arg2 ) {
    HRESULT _hr = put_PLOSs(Pt, _arg2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void ISCPI_MMEMory_STORe::PutCALibration ( _bstr_t _arg1 ) {
    HRESULT _hr = put_CALibration(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_SENSe_ROSCillator wrapper method implementations
//

inline _bstr_t ISCPI_SENSe_ROSCillator::GetSOURce ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SOURce(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISCPI_SENSe_ROSCillator::PutSOURce ( _bstr_t Value ) {
    HRESULT _hr = put_SOURce(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_SERVice_CHANnel_TRACe wrapper method implementations
//

inline long ISCPI_SERVice_CHANnel_TRACe::GetACTive ( ) {
    long _result = 0;
    HRESULT _hr = get_ACTive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long ISCPI_SERVice_CHANnel_TRACe::GetCOUNt ( ) {
    long _result = 0;
    HRESULT _hr = get_COUNt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISCPI_SERVice_CHANnel wrapper method implementations
//

inline ISCPI_SERVice_CHANnel_TRACePtr ISCPI_SERVice_CHANnel::GetTRACe ( ) {
    struct ISCPI_SERVice_CHANnel_TRACe * _result = 0;
    HRESULT _hr = get_TRACe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SERVice_CHANnel_TRACePtr(_result, false);
}

inline long ISCPI_SERVice_CHANnel::GetACTive ( ) {
    long _result = 0;
    HRESULT _hr = get_ACTive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long ISCPI_SERVice_CHANnel::GetCOUNt ( ) {
    long _result = 0;
    HRESULT _hr = get_COUNt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISCPI_SERVice_PORT wrapper method implementations
//

inline long ISCPI_SERVice_PORT::GetCOUNt ( ) {
    long _result = 0;
    HRESULT _hr = get_COUNt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISCPI_SERVice_SWEep_FREQuency wrapper method implementations
//

inline double ISCPI_SERVice_SWEep_FREQuency::GetMAXimum ( ) {
    double _result = 0;
    HRESULT _hr = get_MAXimum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double ISCPI_SERVice_SWEep_FREQuency::GetMINimum ( ) {
    double _result = 0;
    HRESULT _hr = get_MINimum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISCPI_SERVice_SWEep wrapper method implementations
//

inline ISCPI_SERVice_SWEep_FREQuencyPtr ISCPI_SERVice_SWEep::GetFREQuency ( ) {
    struct ISCPI_SERVice_SWEep_FREQuency * _result = 0;
    HRESULT _hr = get_FREQuency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SERVice_SWEep_FREQuencyPtr(_result, false);
}

inline long ISCPI_SERVice_SWEep::GetPOINts ( ) {
    long _result = 0;
    HRESULT _hr = get_POINts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISCPI_SERVice wrapper method implementations
//

inline ISCPI_SERVice_PORTPtr ISCPI_SERVice::GetPORT ( ) {
    struct ISCPI_SERVice_PORT * _result = 0;
    HRESULT _hr = get_PORT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SERVice_PORTPtr(_result, false);
}

inline ISCPI_SERVice_SWEepPtr ISCPI_SERVice::GetSWEep ( ) {
    struct ISCPI_SERVice_SWEep * _result = 0;
    HRESULT _hr = get_SWEep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SERVice_SWEepPtr(_result, false);
}

inline ISCPI_SERVice_CHANnelPtr ISCPI_SERVice::GetCHANnel ( long Ch ) {
    struct ISCPI_SERVice_CHANnel * _result = 0;
    HRESULT _hr = get_CHANnel(Ch, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SERVice_CHANnelPtr(_result, false);
}

//
// interface ISCPI_SENSe_SWEep_POINt wrapper method implementations
//

inline double ISCPI_SENSe_SWEep_POINt::GetTIME ( ) {
    double _result = 0;
    HRESULT _hr = get_TIME(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_SWEep_POINt::PutTIME ( double Value ) {
    HRESULT _hr = put_TIME(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_SOURce_POWer_PORT_CORRection_COLLect wrapper method implementations
//

inline HRESULT ISCPI_SOURce_POWer_PORT_CORRection_COLLect::ACQuire ( ) {
    HRESULT _hr = raw_ACQuire();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ISCPI_SOURce_POWer_PORT_CORRection wrapper method implementations
//

inline VARIANT_BOOL ISCPI_SOURce_POWer_PORT_CORRection::GetSTATe ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_STATe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SOURce_POWer_PORT_CORRection::PutSTATe ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_STATe(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ISCPI_SOURce_POWer_PORT_CORRection_COLLectPtr ISCPI_SOURce_POWer_PORT_CORRection::GetCOLLect ( ) {
    struct ISCPI_SOURce_POWer_PORT_CORRection_COLLect * _result = 0;
    HRESULT _hr = get_COLLect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SOURce_POWer_PORT_CORRection_COLLectPtr(_result, false);
}

inline _variant_t ISCPI_SOURce_POWer_PORT_CORRection::GetDATA ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DATA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ISCPI_SOURce_POWer_PORT_CORRection::PutDATA ( const _variant_t & Value ) {
    HRESULT _hr = put_DATA(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_SOURce_POWer_PORT wrapper method implementations
//

inline ISCPI_SOURce_POWer_PORT_CORRectionPtr ISCPI_SOURce_POWer_PORT::GetCORRection ( ) {
    struct ISCPI_SOURce_POWer_PORT_CORRection * _result = 0;
    HRESULT _hr = get_CORRection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SOURce_POWer_PORT_CORRectionPtr(_result, false);
}

//
// interface ISCPI_SOURce_POWer wrapper method implementations
//

inline double ISCPI_SOURce_POWer::GetCENTer ( ) {
    double _result = 0;
    HRESULT _hr = get_CENTer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SOURce_POWer::PutCENTer ( double Value ) {
    HRESULT _hr = put_CENTer(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ISCPI_SOURce_POWer_LEVelPtr ISCPI_SOURce_POWer::GetLEVel ( ) {
    struct ISCPI_SOURce_POWer_LEVel * _result = 0;
    HRESULT _hr = get_LEVel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SOURce_POWer_LEVelPtr(_result, false);
}

inline double ISCPI_SOURce_POWer::GetSPAN ( ) {
    double _result = 0;
    HRESULT _hr = get_SPAN(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SOURce_POWer::PutSPAN ( double Value ) {
    HRESULT _hr = put_SPAN(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ISCPI_SOURce_POWer::GetSTARt ( ) {
    double _result = 0;
    HRESULT _hr = get_STARt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SOURce_POWer::PutSTARt ( double Value ) {
    HRESULT _hr = put_STARt(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ISCPI_SOURce_POWer::GetSTOP ( ) {
    double _result = 0;
    HRESULT _hr = get_STOP(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SOURce_POWer::PutSTOP ( double Value ) {
    HRESULT _hr = put_STOP(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ISCPI_SOURce_POWer_PORTPtr ISCPI_SOURce_POWer::GetPORT ( long Pt ) {
    struct ISCPI_SOURce_POWer_PORT * _result = 0;
    HRESULT _hr = get_PORT(Pt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SOURce_POWer_PORTPtr(_result, false);
}

//
// interface ISCPI_SYSTem_CORRection wrapper method implementations
//

inline VARIANT_BOOL ISCPI_SYSTem_CORRection::GetSTATe ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_STATe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SYSTem_CORRection::PutSTATe ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_STATe(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_CALCulate_SELected_MSTatistics_DOMain_MARKer wrapper method implementations
//

inline long ISCPI_CALCulate_SELected_MSTatistics_DOMain_MARKer::GetSTARt ( ) {
    long _result = 0;
    HRESULT _hr = get_STARt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_SELected_MSTatistics_DOMain_MARKer::PutSTARt ( long Value ) {
    HRESULT _hr = put_STARt(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISCPI_CALCulate_SELected_MSTatistics_DOMain_MARKer::GetSTOP ( ) {
    long _result = 0;
    HRESULT _hr = get_STOP(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_SELected_MSTatistics_DOMain_MARKer::PutSTOP ( long Value ) {
    HRESULT _hr = put_STOP(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_CALCulate_SELected_MSTatistics_DOMain wrapper method implementations
//

inline ISCPI_CALCulate_SELected_MSTatistics_DOMain_MARKerPtr ISCPI_CALCulate_SELected_MSTatistics_DOMain::GetMARKer ( ) {
    struct ISCPI_CALCulate_SELected_MSTatistics_DOMain_MARKer * _result = 0;
    HRESULT _hr = get_MARKer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_CALCulate_SELected_MSTatistics_DOMain_MARKerPtr(_result, false);
}

inline VARIANT_BOOL ISCPI_CALCulate_SELected_MSTatistics_DOMain::GetSTATe ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_STATe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_SELected_MSTatistics_DOMain::PutSTATe ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_STATe(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_CALCulate_SELected_MSTatistics wrapper method implementations
//

inline _variant_t ISCPI_CALCulate_SELected_MSTatistics::GetDATA ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DATA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL ISCPI_CALCulate_SELected_MSTatistics::GetSTATe ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_STATe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_SELected_MSTatistics::PutSTATe ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_STATe(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ISCPI_CALCulate_SELected_MSTatistics_DOMainPtr ISCPI_CALCulate_SELected_MSTatistics::GetDOMain ( ) {
    struct ISCPI_CALCulate_SELected_MSTatistics_DOMain * _result = 0;
    HRESULT _hr = get_DOMain(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_CALCulate_SELected_MSTatistics_DOMainPtr(_result, false);
}

//
// interface ISCPI_SYSTem_TEMPerature wrapper method implementations
//

inline double ISCPI_SYSTem_TEMPerature::GetSENSor ( long Idx ) {
    double _result = 0;
    HRESULT _hr = get_SENSor(Idx, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISCPI_SYSTem wrapper method implementations
//

inline HRESULT ISCPI_SYSTem::PRESet ( ) {
    HRESULT _hr = raw_PRESet();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISCPI_SYSTem::LOCal ( ) {
    HRESULT _hr = raw_LOCal();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISCPI_SYSTem::REMote ( ) {
    HRESULT _hr = raw_REMote();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISCPI_SYSTem::RWLock ( ) {
    HRESULT _hr = raw_RWLock();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ISCPI_SYSTem_BEEPerPtr ISCPI_SYSTem::GetBEEPer ( ) {
    struct ISCPI_SYSTem_BEEPer * _result = 0;
    HRESULT _hr = get_BEEPer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SYSTem_BEEPerPtr(_result, false);
}

inline ISCPI_SYSTem_CORRectionPtr ISCPI_SYSTem::GetCORRection ( ) {
    struct ISCPI_SYSTem_CORRection * _result = 0;
    HRESULT _hr = get_CORRection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SYSTem_CORRectionPtr(_result, false);
}

inline _variant_t ISCPI_SYSTem::GetDATE ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DATE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ISCPI_SYSTem::PutDATE ( const _variant_t & Value ) {
    HRESULT _hr = put_DATE(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ISCPI_SYSTem::GetTIME ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_TIME(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ISCPI_SYSTem::PutTIME ( const _variant_t & Value ) {
    HRESULT _hr = put_TIME(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT ISCPI_SYSTem::HIDE ( ) {
    HRESULT _hr = raw_HIDE();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISCPI_SYSTem::SHOW ( ) {
    HRESULT _hr = raw_SHOW();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISCPI_SYSTem::TERMinate ( ) {
    HRESULT _hr = raw_TERMinate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ISCPI_SYSTem_TEMPeraturePtr ISCPI_SYSTem::GetTEMPerature ( ) {
    struct ISCPI_SYSTem_TEMPerature * _result = 0;
    HRESULT _hr = get_TEMPerature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SYSTem_TEMPeraturePtr(_result, false);
}

//
// interface ISCPI_CALCulate_TRACe_DATA wrapper method implementations
//

inline _variant_t ISCPI_CALCulate_TRACe_DATA::GetFDATa ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_FDATa(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ISCPI_CALCulate_TRACe_DATA::PutFDATa ( const _variant_t & Value ) {
    HRESULT _hr = put_FDATa(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ISCPI_CALCulate_TRACe_DATA::GetFMEMory ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_FMEMory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ISCPI_CALCulate_TRACe_DATA::PutFMEMory ( const _variant_t & Value ) {
    HRESULT _hr = put_FMEMory(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ISCPI_CALCulate_TRACe_DATA::GetSDATa ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SDATa(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ISCPI_CALCulate_TRACe_DATA::PutSDATa ( const _variant_t & Value ) {
    HRESULT _hr = put_SDATa(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ISCPI_CALCulate_TRACe_DATA::GetSMEMory ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SMEMory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ISCPI_CALCulate_TRACe_DATA::PutSMEMory ( const _variant_t & Value ) {
    HRESULT _hr = put_SMEMory(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_CALCulate_TRACe wrapper method implementations
//

inline ISCPI_CALCulate_TRACe_DATAPtr ISCPI_CALCulate_TRACe::GetDATA ( ) {
    struct ISCPI_CALCulate_TRACe_DATA * _result = 0;
    HRESULT _hr = get_DATA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_CALCulate_TRACe_DATAPtr(_result, false);
}

//
// interface ISCPI_SYSTem_COMMunicate wrapper method implementations
//

inline ISCPI_SYSTem_COMMunicate_ECALPtr ISCPI_SYSTem_COMMunicate::GetECAL ( ) {
    struct ISCPI_SYSTem_COMMunicate_ECAL * _result = 0;
    HRESULT _hr = get_ECAL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SYSTem_COMMunicate_ECALPtr(_result, false);
}

//
// interface ISCPI_SYSTem_COMMunicate_ECAL_TEMPerature wrapper method implementations
//

inline double ISCPI_SYSTem_COMMunicate_ECAL_TEMPerature::GetSENSor ( ) {
    double _result = 0;
    HRESULT _hr = get_SENSor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISCPI_SYSTem_COMMunicate_ECAL wrapper method implementations
//

inline ISCPI_SYSTem_COMMunicate_ECAL_TEMPeraturePtr ISCPI_SYSTem_COMMunicate_ECAL::GetTEMPerature ( ) {
    struct ISCPI_SYSTem_COMMunicate_ECAL_TEMPerature * _result = 0;
    HRESULT _hr = get_TEMPerature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SYSTem_COMMunicate_ECAL_TEMPeraturePtr(_result, false);
}

inline _bstr_t ISCPI_SYSTem_COMMunicate_ECAL::GetIMPedance ( long ePt ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMPedance(ePt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISCPI_SYSTem_COMMunicate_ECAL::PutIMPedance ( long ePt, _bstr_t Value ) {
    HRESULT _hr = put_IMPedance(ePt, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT ISCPI_SYSTem_COMMunicate_ECAL::THRU ( long ePt1, long ePt2 ) {
    HRESULT _hr = raw_THRU(ePt1, ePt2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ISCPI_SENSe_CORRection_COLLect_ECAL_ORIentation wrapper method implementations
//

inline VARIANT_BOOL ISCPI_SENSe_CORRection_COLLect_ECAL_ORIentation::GetSTATe ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_STATe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_CORRection_COLLect_ECAL_ORIentation::PutSTATe ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_STATe(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT ISCPI_SENSe_CORRection_COLLect_ECAL_ORIentation::EXECute ( const _variant_t & Param1 ) {
    HRESULT _hr = raw_EXECute(Param1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ISCPI_SENSe_CORRection_COLLect_ECAL_UTHRu wrapper method implementations
//

inline VARIANT_BOOL ISCPI_SENSe_CORRection_COLLect_ECAL_UTHRu::GetSTATe ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_STATe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_CORRection_COLLect_ECAL_UTHRu::PutSTATe ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_STATe(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_CALCulate_SELected_MAXhold wrapper method implementations
//

inline VARIANT_BOOL ISCPI_CALCulate_SELected_MAXhold::GetSTATe ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_STATe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_SELected_MAXhold::PutSTATe ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_STATe(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_SENSe_CORRection_TRANsform_TIME wrapper method implementations
//

inline VARIANT_BOOL ISCPI_SENSe_CORRection_TRANsform_TIME::GetSTATe ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_STATe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_CORRection_TRANsform_TIME::PutSTATe ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_STATe(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ISCPI_SENSe_CORRection_TRANsform_TIME::GetRVELocity ( ) {
    double _result = 0;
    HRESULT _hr = get_RVELocity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_CORRection_TRANsform_TIME::PutRVELocity ( double Value ) {
    HRESULT _hr = put_RVELocity(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ISCPI_SENSe_CORRection_TRANsform_TIME::GetLOSS ( ) {
    double _result = 0;
    HRESULT _hr = get_LOSS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_CORRection_TRANsform_TIME::PutLOSS ( double Value ) {
    HRESULT _hr = put_LOSS(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ISCPI_SENSe_CORRection_TRANsform_TIME::GetFREQuency ( ) {
    double _result = 0;
    HRESULT _hr = get_FREQuency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_CORRection_TRANsform_TIME::PutFREQuency ( double Value ) {
    HRESULT _hr = put_FREQuency(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_SENSe_CORRection_TRANsform wrapper method implementations
//

inline ISCPI_SENSe_CORRection_TRANsform_TIMEPtr ISCPI_SENSe_CORRection_TRANsform::GetTIME ( ) {
    struct ISCPI_SENSe_CORRection_TRANsform_TIME * _result = 0;
    HRESULT _hr = get_TIME(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SENSe_CORRection_TRANsform_TIMEPtr(_result, false);
}

//
// interface ISCPI_CALCulate_SELected_TRANsform_TIME_REFLection wrapper method implementations
//

inline _bstr_t ISCPI_CALCulate_SELected_TRANsform_TIME_REFLection::GetTYPE ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TYPE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISCPI_CALCulate_SELected_TRANsform_TIME_REFLection::PutTYPE ( _bstr_t Value ) {
    HRESULT _hr = put_TYPE(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_CALCulate_SELected_TRANsform_TIME wrapper method implementations
//

inline double ISCPI_CALCulate_SELected_TRANsform_TIME::GetCENTer ( ) {
    double _result = 0;
    HRESULT _hr = get_CENTer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_SELected_TRANsform_TIME::PutCENTer ( double Value ) {
    HRESULT _hr = put_CENTer(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ISCPI_CALCulate_SELected_TRANsform_TIME_IMPulsePtr ISCPI_CALCulate_SELected_TRANsform_TIME::GetIMPulse ( ) {
    struct ISCPI_CALCulate_SELected_TRANsform_TIME_IMPulse * _result = 0;
    HRESULT _hr = get_IMPulse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_CALCulate_SELected_TRANsform_TIME_IMPulsePtr(_result, false);
}

inline double ISCPI_CALCulate_SELected_TRANsform_TIME::GetKBESsel ( ) {
    double _result = 0;
    HRESULT _hr = get_KBESsel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_SELected_TRANsform_TIME::PutKBESsel ( double Value ) {
    HRESULT _hr = put_KBESsel(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT ISCPI_CALCulate_SELected_TRANsform_TIME::LPFRequency ( ) {
    HRESULT _hr = raw_LPFRequency();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double ISCPI_CALCulate_SELected_TRANsform_TIME::GetSPAN ( ) {
    double _result = 0;
    HRESULT _hr = get_SPAN(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_SELected_TRANsform_TIME::PutSPAN ( double Value ) {
    HRESULT _hr = put_SPAN(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ISCPI_CALCulate_SELected_TRANsform_TIME::GetSTARt ( ) {
    double _result = 0;
    HRESULT _hr = get_STARt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_SELected_TRANsform_TIME::PutSTARt ( double Value ) {
    HRESULT _hr = put_STARt(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISCPI_CALCulate_SELected_TRANsform_TIME::GetSTATe ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_STATe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_SELected_TRANsform_TIME::PutSTATe ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_STATe(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ISCPI_CALCulate_SELected_TRANsform_TIME_STEPPtr ISCPI_CALCulate_SELected_TRANsform_TIME::GetSTEP ( ) {
    struct ISCPI_CALCulate_SELected_TRANsform_TIME_STEP * _result = 0;
    HRESULT _hr = get_STEP(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_CALCulate_SELected_TRANsform_TIME_STEPPtr(_result, false);
}

inline _bstr_t ISCPI_CALCulate_SELected_TRANsform_TIME::GetSTIMulus ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_STIMulus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISCPI_CALCulate_SELected_TRANsform_TIME::PutSTIMulus ( _bstr_t Value ) {
    HRESULT _hr = put_STIMulus(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ISCPI_CALCulate_SELected_TRANsform_TIME::GetSTOP ( ) {
    double _result = 0;
    HRESULT _hr = get_STOP(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_CALCulate_SELected_TRANsform_TIME::PutSTOP ( double Value ) {
    HRESULT _hr = put_STOP(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISCPI_CALCulate_SELected_TRANsform_TIME::GetTYPE ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TYPE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISCPI_CALCulate_SELected_TRANsform_TIME::PutTYPE ( _bstr_t Value ) {
    HRESULT _hr = put_TYPE(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISCPI_CALCulate_SELected_TRANsform_TIME::GetUNIT ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UNIT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISCPI_CALCulate_SELected_TRANsform_TIME::PutUNIT ( _bstr_t Value ) {
    HRESULT _hr = put_UNIT(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ISCPI_CALCulate_SELected_TRANsform_TIME_REFLectionPtr ISCPI_CALCulate_SELected_TRANsform_TIME::GetREFLection ( ) {
    struct ISCPI_CALCulate_SELected_TRANsform_TIME_REFLection * _result = 0;
    HRESULT _hr = get_REFLection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_CALCulate_SELected_TRANsform_TIME_REFLectionPtr(_result, false);
}

//
// interface ISCPI_CALCulate_SELected_TRANsform wrapper method implementations
//

inline ISCPI_CALCulate_SELected_TRANsform_TIMEPtr ISCPI_CALCulate_SELected_TRANsform::GetTIME ( ) {
    struct ISCPI_CALCulate_SELected_TRANsform_TIME * _result = 0;
    HRESULT _hr = get_TIME(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_CALCulate_SELected_TRANsform_TIMEPtr(_result, false);
}

//
// interface ISCPI_CALCulate_SELected wrapper method implementations
//

inline _bstr_t ISCPI_CALCulate_SELected::GetFORMat ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FORMat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISCPI_CALCulate_SELected::PutFORMat ( _bstr_t Value ) {
    HRESULT _hr = put_FORMat(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ISCPI_CALCulate_SELected_DATAPtr ISCPI_CALCulate_SELected::GetDATA ( ) {
    struct ISCPI_CALCulate_SELected_DATA * _result = 0;
    HRESULT _hr = get_DATA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_CALCulate_SELected_DATAPtr(_result, false);
}

inline ISCPI_CALCulate_SELected_LIMitPtr ISCPI_CALCulate_SELected::GetLIMit ( ) {
    struct ISCPI_CALCulate_SELected_LIMit * _result = 0;
    HRESULT _hr = get_LIMit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_CALCulate_SELected_LIMitPtr(_result, false);
}

inline ISCPI_CALCulate_SELected_MARKerPtr ISCPI_CALCulate_SELected::GetMARKer ( long Mk ) {
    struct ISCPI_CALCulate_SELected_MARKer * _result = 0;
    HRESULT _hr = get_MARKer(Mk, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_CALCulate_SELected_MARKerPtr(_result, false);
}

inline ISCPI_CALCulate_SELected_MATHPtr ISCPI_CALCulate_SELected::GetMATH ( ) {
    struct ISCPI_CALCulate_SELected_MATH * _result = 0;
    HRESULT _hr = get_MATH(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_CALCulate_SELected_MATHPtr(_result, false);
}

inline ISCPI_CALCulate_SELected_MSTatisticsPtr ISCPI_CALCulate_SELected::GetMSTatistics ( ) {
    struct ISCPI_CALCulate_SELected_MSTatistics * _result = 0;
    HRESULT _hr = get_MSTatistics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_CALCulate_SELected_MSTatisticsPtr(_result, false);
}

inline ISCPI_CALCulate_SELected_SMOothingPtr ISCPI_CALCulate_SELected::GetSMOothing ( ) {
    struct ISCPI_CALCulate_SELected_SMOothing * _result = 0;
    HRESULT _hr = get_SMOothing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_CALCulate_SELected_SMOothingPtr(_result, false);
}

inline ISCPI_CALCulate_SELected_RLIMitPtr ISCPI_CALCulate_SELected::GetRLIMit ( ) {
    struct ISCPI_CALCulate_SELected_RLIMit * _result = 0;
    HRESULT _hr = get_RLIMit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_CALCulate_SELected_RLIMitPtr(_result, false);
}

inline ISCPI_CALCulate_SELected_CORRectionPtr ISCPI_CALCulate_SELected::GetCORRection ( ) {
    struct ISCPI_CALCulate_SELected_CORRection * _result = 0;
    HRESULT _hr = get_CORRection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_CALCulate_SELected_CORRectionPtr(_result, false);
}

inline ISCPI_CALCulate_SELected_FILTerPtr ISCPI_CALCulate_SELected::GetFILTer ( ) {
    struct ISCPI_CALCulate_SELected_FILTer * _result = 0;
    HRESULT _hr = get_FILTer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_CALCulate_SELected_FILTerPtr(_result, false);
}

inline ISCPI_CALCulate_SELected_FUNCtionPtr ISCPI_CALCulate_SELected::GetFUNCtion ( ) {
    struct ISCPI_CALCulate_SELected_FUNCtion * _result = 0;
    HRESULT _hr = get_FUNCtion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_CALCulate_SELected_FUNCtionPtr(_result, false);
}

inline ISCPI_CALCulate_SELected_TRANsformPtr ISCPI_CALCulate_SELected::GetTRANsform ( ) {
    struct ISCPI_CALCulate_SELected_TRANsform * _result = 0;
    HRESULT _hr = get_TRANsform(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_CALCulate_SELected_TRANsformPtr(_result, false);
}

inline ISCPI_CALCulate_SELected_CONVersionPtr ISCPI_CALCulate_SELected::GetCONVersion ( ) {
    struct ISCPI_CALCulate_SELected_CONVersion * _result = 0;
    HRESULT _hr = get_CONVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_CALCulate_SELected_CONVersionPtr(_result, false);
}

inline ISCPI_CALCulate_SELected_MAXholdPtr ISCPI_CALCulate_SELected::GetMAXHold ( ) {
    struct ISCPI_CALCulate_SELected_MAXhold * _result = 0;
    HRESULT _hr = get_MAXHold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_CALCulate_SELected_MAXholdPtr(_result, false);
}

//
// interface ISCPI_CALCulate wrapper method implementations
//

inline ISCPI_CALCulate_PARameterPtr ISCPI_CALCulate::GetPARameter ( long Tr ) {
    struct ISCPI_CALCulate_PARameter * _result = 0;
    HRESULT _hr = get_PARameter(Tr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_CALCulate_PARameterPtr(_result, false);
}

inline ISCPI_CALCulate_SELectedPtr ISCPI_CALCulate::GetSELected ( ) {
    struct ISCPI_CALCulate_SELected * _result = 0;
    HRESULT _hr = get_SELected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_CALCulate_SELectedPtr(_result, false);
}

inline ISCPI_CALCulate_FSIMulatorPtr ISCPI_CALCulate::GetFSIMulator ( ) {
    struct ISCPI_CALCulate_FSIMulator * _result = 0;
    HRESULT _hr = get_FSIMulator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_CALCulate_FSIMulatorPtr(_result, false);
}

inline ISCPI_CALCulate_TRACePtr ISCPI_CALCulate::GetTRACe ( long Tr ) {
    struct ISCPI_CALCulate_TRACe * _result = 0;
    HRESULT _hr = get_TRACe(Tr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_CALCulate_TRACePtr(_result, false);
}

//
// interface ISCPI_SENSe_SWEep_REVerse wrapper method implementations
//

inline VARIANT_BOOL ISCPI_SENSe_SWEep_REVerse::GetSTATe ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_STATe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_SWEep_REVerse::PutSTATe ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_STATe(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_SENSe_SWEep wrapper method implementations
//

inline long ISCPI_SENSe_SWEep::GetPOINts ( ) {
    long _result = 0;
    HRESULT _hr = get_POINts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_SWEep::PutPOINts ( long Value ) {
    HRESULT _hr = put_POINts(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISCPI_SENSe_SWEep::GetTYPE ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TYPE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISCPI_SENSe_SWEep::PutTYPE ( _bstr_t Value ) {
    HRESULT _hr = put_TYPE(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ISCPI_SENSe_SWEep_POINtPtr ISCPI_SENSe_SWEep::GetPOINt ( ) {
    struct ISCPI_SENSe_SWEep_POINt * _result = 0;
    HRESULT _hr = get_POINt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SENSe_SWEep_POINtPtr(_result, false);
}

inline ISCPI_SENSe_SWEep_REVersePtr ISCPI_SENSe_SWEep::GetREVerse ( ) {
    struct ISCPI_SENSe_SWEep_REVerse * _result = 0;
    HRESULT _hr = get_REVerse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SENSe_SWEep_REVersePtr(_result, false);
}

//
// interface ISCPI_DISPlay_ANNotation_FREQuency wrapper method implementations
//

inline VARIANT_BOOL ISCPI_DISPlay_ANNotation_FREQuency::GetSTATe ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_STATe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_DISPlay_ANNotation_FREQuency::PutSTATe ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_STATe(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_DISPlay_ANNotation wrapper method implementations
//

inline ISCPI_DISPlay_ANNotation_FREQuencyPtr ISCPI_DISPlay_ANNotation::GetFREQuency ( ) {
    struct ISCPI_DISPlay_ANNotation_FREQuency * _result = 0;
    HRESULT _hr = get_FREQuency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_DISPlay_ANNotation_FREQuencyPtr(_result, false);
}

//
// interface ISCPI_DISPlay wrapper method implementations
//

inline long ISCPI_DISPlay::GetSPLit ( ) {
    long _result = 0;
    HRESULT _hr = get_SPLit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_DISPlay::PutSPLit ( long Value ) {
    HRESULT _hr = put_SPLit(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ISCPI_DISPlay_WINDowPtr ISCPI_DISPlay::GetWINDow ( long Ch ) {
    struct ISCPI_DISPlay_WINDow * _result = 0;
    HRESULT _hr = get_WINDow(Ch, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_DISPlay_WINDowPtr(_result, false);
}

inline VARIANT_BOOL ISCPI_DISPlay::GetENABle ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ENABle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_DISPlay::PutENABle ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_ENABle(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ISCPI_DISPlay_UPDatePtr ISCPI_DISPlay::GetUPDate_ ( ) {
    struct ISCPI_DISPlay_UPDate * _result = 0;
    HRESULT _hr = get_UPDate_(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_DISPlay_UPDatePtr(_result, false);
}

inline VARIANT_BOOL ISCPI_DISPlay::GetFSIGn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FSIGn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_DISPlay::PutFSIGn ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_FSIGn(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ISCPI_DISPlay_COLorPtr ISCPI_DISPlay::GetCOLor ( ) {
    struct ISCPI_DISPlay_COLor * _result = 0;
    HRESULT _hr = get_COLor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_DISPlay_COLorPtr(_result, false);
}

inline _bstr_t ISCPI_DISPlay::GetIMAGe ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAGe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISCPI_DISPlay::PutIMAGe ( _bstr_t Value ) {
    HRESULT _hr = put_IMAGe(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ISCPI_DISPlay_ANNotationPtr ISCPI_DISPlay::GetANNotation ( ) {
    struct ISCPI_DISPlay_ANNotation * _result = 0;
    HRESULT _hr = get_ANNotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_DISPlay_ANNotationPtr(_result, false);
}

inline VARIANT_BOOL ISCPI_DISPlay::GetMAXimize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MAXimize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_DISPlay::PutMAXimize ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_MAXimize(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_TRIGger_SEQuence_EXTernal wrapper method implementations
//

inline _bstr_t ISCPI_TRIGger_SEQuence_EXTernal::GetSLOPe ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SLOPe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISCPI_TRIGger_SEQuence_EXTernal::PutSLOPe ( _bstr_t Value ) {
    HRESULT _hr = put_SLOPe(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISCPI_TRIGger_SEQuence_EXTernal::GetPOSition ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_POSition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISCPI_TRIGger_SEQuence_EXTernal::PutPOSition ( _bstr_t Value ) {
    HRESULT _hr = put_POSition(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ISCPI_TRIGger_SEQuence_EXTernal::GetDelay ( ) {
    double _result = 0;
    HRESULT _hr = get_Delay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_TRIGger_SEQuence_EXTernal::PutDelay ( double Value ) {
    HRESULT _hr = put_Delay(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_TRIGger_SEQuence wrapper method implementations
//

inline _bstr_t ISCPI_TRIGger_SEQuence::GetSOURce ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SOURce(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISCPI_TRIGger_SEQuence::PutSOURce ( _bstr_t Value ) {
    HRESULT _hr = put_SOURce(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT ISCPI_TRIGger_SEQuence::IMMediate ( ) {
    HRESULT _hr = raw_IMMediate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISCPI_TRIGger_SEQuence::SINGle ( ) {
    HRESULT _hr = raw_SINGle();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t ISCPI_TRIGger_SEQuence::GetSTATe ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_STATe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL ISCPI_TRIGger_SEQuence::GetPOINt ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_POINt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_TRIGger_SEQuence::PutPOINt ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_POINt(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ISCPI_TRIGger_SEQuence_EXTernalPtr ISCPI_TRIGger_SEQuence::GetEXTernal ( ) {
    struct ISCPI_TRIGger_SEQuence_EXTernal * _result = 0;
    HRESULT _hr = get_EXTernal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_TRIGger_SEQuence_EXTernalPtr(_result, false);
}

inline HRESULT ISCPI_TRIGger_SEQuence::WAIT ( _bstr_t Value ) {
    HRESULT _hr = raw_WAIT(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ISCPI_TRIGger wrapper method implementations
//

inline ISCPI_TRIGger_SEQuencePtr ISCPI_TRIGger::GetSEQuence ( ) {
    struct ISCPI_TRIGger_SEQuence * _result = 0;
    HRESULT _hr = get_SEQuence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_TRIGger_SEQuencePtr(_result, false);
}

//
// interface ISCPI_MMEMory_LOAD_SNP_TRACe wrapper method implementations
//

inline void ISCPI_MMEMory_LOAD_SNP_TRACe::PutMEMory ( _bstr_t _arg1 ) {
    HRESULT _hr = put_MEMory(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_MMEMory_LOAD_SNP wrapper method implementations
//

inline ISCPI_MMEMory_LOAD_SNP_TRACePtr ISCPI_MMEMory_LOAD_SNP::GetTRACe ( long Tr ) {
    struct ISCPI_MMEMory_LOAD_SNP_TRACe * _result = 0;
    HRESULT _hr = get_TRACe(Tr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_MMEMory_LOAD_SNP_TRACePtr(_result, false);
}

inline void ISCPI_MMEMory_LOAD_SNP::PutDATA ( _bstr_t _arg1 ) {
    HRESULT _hr = put_DATA(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_MMEMory_LOAD wrapper method implementations
//

inline void ISCPI_MMEMory_LOAD::PutSTATe ( _bstr_t _arg1 ) {
    HRESULT _hr = put_STATe(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ISCPI_MMEMory_LOAD_CHANnelPtr ISCPI_MMEMory_LOAD::GetCHANnel ( ) {
    struct ISCPI_MMEMory_LOAD_CHANnel * _result = 0;
    HRESULT _hr = get_CHANnel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_MMEMory_LOAD_CHANnelPtr(_result, false);
}

inline void ISCPI_MMEMory_LOAD::PutLIMit ( _bstr_t _arg1 ) {
    HRESULT _hr = put_LIMit(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void ISCPI_MMEMory_LOAD::PutPLOSs ( long Pt, _bstr_t _arg2 ) {
    HRESULT _hr = put_PLOSs(Pt, _arg2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void ISCPI_MMEMory_LOAD::PutRLIMit ( _bstr_t _arg1 ) {
    HRESULT _hr = put_RLIMit(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void ISCPI_MMEMory_LOAD::PutSEGMent ( _bstr_t _arg1 ) {
    HRESULT _hr = put_SEGMent(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void ISCPI_MMEMory_LOAD::PutCKIT ( long Ck, _bstr_t _arg2 ) {
    HRESULT _hr = put_CKIT(Ck, _arg2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void ISCPI_MMEMory_LOAD::PutCALibration ( _bstr_t _arg1 ) {
    HRESULT _hr = put_CALibration(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ISCPI_MMEMory_LOAD_SNPPtr ISCPI_MMEMory_LOAD::GetSNP ( ) {
    struct ISCPI_MMEMory_LOAD_SNP * _result = 0;
    HRESULT _hr = get_SNP(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_MMEMory_LOAD_SNPPtr(_result, false);
}

//
// interface ISCPI_MMEMory wrapper method implementations
//

inline ISCPI_MMEMory_LOADPtr ISCPI_MMEMory::GetLOAD ( ) {
    struct ISCPI_MMEMory_LOAD * _result = 0;
    HRESULT _hr = get_LOAD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_MMEMory_LOADPtr(_result, false);
}

inline ISCPI_MMEMory_STORePtr ISCPI_MMEMory::GetSTORe ( ) {
    struct ISCPI_MMEMory_STORe * _result = 0;
    HRESULT _hr = get_STORe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_MMEMory_STORePtr(_result, false);
}

inline HRESULT ISCPI_MMEMory::COPY ( _bstr_t Src, _bstr_t Dst ) {
    HRESULT _hr = raw_COPY(Src, Dst);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISCPI_MMEMory::DELete ( _bstr_t File ) {
    HRESULT _hr = raw_DELete(File);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline void ISCPI_MMEMory::PutMDIRectory ( _bstr_t _arg1 ) {
    HRESULT _hr = put_MDIRectory(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_SENSe_OFFSet_PORT_FREQuency wrapper method implementations
//

inline _variant_t ISCPI_SENSe_OFFSet_PORT_FREQuency::GetDATA ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DATA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline double ISCPI_SENSe_OFFSet_PORT_FREQuency::GetDIVisor ( ) {
    double _result = 0;
    HRESULT _hr = get_DIVisor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_OFFSet_PORT_FREQuency::PutDIVisor ( double Value ) {
    HRESULT _hr = put_DIVisor(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ISCPI_SENSe_OFFSet_PORT_FREQuency::GetMULTiplier ( ) {
    double _result = 0;
    HRESULT _hr = get_MULTiplier(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_OFFSet_PORT_FREQuency::PutMULTiplier ( double Value ) {
    HRESULT _hr = put_MULTiplier(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ISCPI_SENSe_OFFSet_PORT_FREQuency::GetOFFSet ( ) {
    double _result = 0;
    HRESULT _hr = get_OFFSet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_OFFSet_PORT_FREQuency::PutOFFSet ( double Value ) {
    HRESULT _hr = put_OFFSet(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ISCPI_SENSe_OFFSet_PORT_FREQuency::GetSTARt ( ) {
    double _result = 0;
    HRESULT _hr = get_STARt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_OFFSet_PORT_FREQuency::PutSTARt ( double Value ) {
    HRESULT _hr = put_STARt(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ISCPI_SENSe_OFFSet_PORT_FREQuency::GetSTOP ( ) {
    double _result = 0;
    HRESULT _hr = get_STOP(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_OFFSet_PORT_FREQuency::PutSTOP ( double Value ) {
    HRESULT _hr = put_STOP(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_SENSe_OFFSet_PORT wrapper method implementations
//

inline ISCPI_SENSe_OFFSet_PORT_FREQuencyPtr ISCPI_SENSe_OFFSet_PORT::GetFREQuency ( ) {
    struct ISCPI_SENSe_OFFSet_PORT_FREQuency * _result = 0;
    HRESULT _hr = get_FREQuency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SENSe_OFFSet_PORT_FREQuencyPtr(_result, false);
}

//
// interface ISCPI_SENSe_OFFSet_ADJust_CONTinuous wrapper method implementations
//

inline VARIANT_BOOL ISCPI_SENSe_OFFSet_ADJust_CONTinuous::GetSTATe ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_STATe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_OFFSet_ADJust_CONTinuous::PutSTATe ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_STATe(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISCPI_SENSe_OFFSet_ADJust_CONTinuous::GetPERiod ( ) {
    long _result = 0;
    HRESULT _hr = get_PERiod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_OFFSet_ADJust_CONTinuous::PutPERiod ( long Value ) {
    HRESULT _hr = put_PERiod(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_SENSe_OFFSet_ADJust wrapper method implementations
//

inline VARIANT_BOOL ISCPI_SENSe_OFFSet_ADJust::GetSTATe ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_STATe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_OFFSet_ADJust::PutSTATe ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_STATe(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISCPI_SENSe_OFFSet_ADJust::GetPORT ( ) {
    long _result = 0;
    HRESULT _hr = get_PORT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_OFFSet_ADJust::PutPORT ( long Value ) {
    HRESULT _hr = put_PORT(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ISCPI_SENSe_OFFSet_ADJust::GetValue ( ) {
    double _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_OFFSet_ADJust::PutValue ( double Value ) {
    HRESULT _hr = put_Value(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT ISCPI_SENSe_OFFSet_ADJust::EXECute ( ) {
    HRESULT _hr = raw_EXECute();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ISCPI_SENSe_OFFSet_ADJust_CONTinuousPtr ISCPI_SENSe_OFFSet_ADJust::GetCONTinuous ( ) {
    struct ISCPI_SENSe_OFFSet_ADJust_CONTinuous * _result = 0;
    HRESULT _hr = get_CONTinuous(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SENSe_OFFSet_ADJust_CONTinuousPtr(_result, false);
}

//
// interface ISCPI_SENSe_OFFSet wrapper method implementations
//

inline VARIANT_BOOL ISCPI_SENSe_OFFSet::GetSTATe ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_STATe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_OFFSet::PutSTATe ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_STATe(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ISCPI_SENSe_OFFSet_PORTPtr ISCPI_SENSe_OFFSet::GetPORT ( long Pt ) {
    struct ISCPI_SENSe_OFFSet_PORT * _result = 0;
    HRESULT _hr = get_PORT(Pt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SENSe_OFFSet_PORTPtr(_result, false);
}

inline ISCPI_SENSe_OFFSet_ADJustPtr ISCPI_SENSe_OFFSet::GetADJust ( ) {
    struct ISCPI_SENSe_OFFSet_ADJust * _result = 0;
    HRESULT _hr = get_ADJust(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SENSe_OFFSet_ADJustPtr(_result, false);
}

inline long ISCPI_SENSe_OFFSet::GetTYPE ( ) {
    long _result = 0;
    HRESULT _hr = get_TYPE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_OFFSet::PutTYPE ( long Value ) {
    HRESULT _hr = put_TYPE(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_SENSe_DATA wrapper method implementations
//

inline _variant_t ISCPI_SENSe_DATA::GetRAWData ( _bstr_t Param1 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RAWData(Param1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ISCPI_SENSe_DATA::GetCORData ( _bstr_t Param1 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CORData(Param1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface ISCPI_SOURce_REFerence_CORRection wrapper method implementations
//

inline VARIANT_BOOL ISCPI_SOURce_REFerence_CORRection::GetSTATe ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_STATe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SOURce_REFerence_CORRection::PutSTATe ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_STATe(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_SOURce_REFerence wrapper method implementations
//

inline double ISCPI_SOURce_REFerence::GetFREQuency ( ) {
    double _result = 0;
    HRESULT _hr = get_FREQuency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SOURce_REFerence::PutFREQuency ( double Value ) {
    HRESULT _hr = put_FREQuency(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ISCPI_SOURce_REFerence_CORRectionPtr ISCPI_SOURce_REFerence::GetCORRection ( ) {
    struct ISCPI_SOURce_REFerence_CORRection * _result = 0;
    HRESULT _hr = get_CORRection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SOURce_REFerence_CORRectionPtr(_result, false);
}

//
// interface ISCPI_SOURce wrapper method implementations
//

inline ISCPI_SOURce_POWerPtr ISCPI_SOURce::GetPOWer ( ) {
    struct ISCPI_SOURce_POWer * _result = 0;
    HRESULT _hr = get_POWer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SOURce_POWerPtr(_result, false);
}

inline ISCPI_SOURce_REFerencePtr ISCPI_SOURce::GetREFerence ( ) {
    struct ISCPI_SOURce_REFerence * _result = 0;
    HRESULT _hr = get_REFerence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SOURce_REFerencePtr(_result, false);
}

//
// interface ISCPI_SENSe_VVM_FREQuency wrapper method implementations
//

inline double ISCPI_SENSe_VVM_FREQuency::GetCW ( ) {
    double _result = 0;
    HRESULT _hr = get_CW(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_VVM_FREQuency::PutCW ( double Value ) {
    HRESULT _hr = put_CW(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_SENSe_VVM_REFerence wrapper method implementations
//

inline HRESULT ISCPI_SENSe_VVM_REFerence::MEMorize ( ) {
    HRESULT _hr = raw_MEMorize();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISCPI_SENSe_VVM_REFerence::CLEar ( ) {
    HRESULT _hr = raw_CLEar();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _variant_t ISCPI_SENSe_VVM_REFerence::GetDATA ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DATA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface ISCPI_SENSe_VVM_TABLe wrapper method implementations
//

inline HRESULT ISCPI_SENSe_VVM_TABLe::MEMorize ( ) {
    HRESULT _hr = raw_MEMorize();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISCPI_SENSe_VVM_TABLe::CLEar ( ) {
    HRESULT _hr = raw_CLEar();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISCPI_SENSe_VVM_TABLe::INSert ( long Index ) {
    HRESULT _hr = raw_INSert(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISCPI_SENSe_VVM_TABLe::REMove ( long Index ) {
    HRESULT _hr = raw_REMove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISCPI_SENSe_VVM_TABLe::SAVE ( _bstr_t NAME ) {
    HRESULT _hr = raw_SAVE(NAME);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _variant_t ISCPI_SENSe_VVM_TABLe::GetDATA ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DATA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface ISCPI_SENSe_VVM_DISPlay_FONT wrapper method implementations
//

inline long ISCPI_SENSe_VVM_DISPlay_FONT::GetSIZE ( ) {
    long _result = 0;
    HRESULT _hr = get_SIZE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_VVM_DISPlay_FONT::PutSIZE ( long Value ) {
    HRESULT _hr = put_SIZE(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_SENSe_VVM_DISPlay wrapper method implementations
//

inline long ISCPI_SENSe_VVM_DISPlay::GetRESolution ( ) {
    long _result = 0;
    HRESULT _hr = get_RESolution(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_VVM_DISPlay::PutRESolution ( long Value ) {
    HRESULT _hr = put_RESolution(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ISCPI_SENSe_VVM_DISPlay_FONTPtr ISCPI_SENSe_VVM_DISPlay::GetFONT ( ) {
    struct ISCPI_SENSe_VVM_DISPlay_FONT * _result = 0;
    HRESULT _hr = get_FONT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SENSe_VVM_DISPlay_FONTPtr(_result, false);
}

//
// interface ISCPI_SENSe_VVM wrapper method implementations
//

inline _bstr_t ISCPI_SENSe_VVM::GetTYPE ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TYPE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISCPI_SENSe_VVM::PutTYPE ( _bstr_t Value ) {
    HRESULT _hr = put_TYPE(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISCPI_SENSe_VVM::GetFORMat ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FORMat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISCPI_SENSe_VVM::PutFORMat ( _bstr_t Value ) {
    HRESULT _hr = put_FORMat(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ISCPI_SENSe_VVM_FREQuencyPtr ISCPI_SENSe_VVM::GetFREQuency ( ) {
    struct ISCPI_SENSe_VVM_FREQuency * _result = 0;
    HRESULT _hr = get_FREQuency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SENSe_VVM_FREQuencyPtr(_result, false);
}

inline ISCPI_SENSe_VVM_REFerencePtr ISCPI_SENSe_VVM::GetREFerence ( ) {
    struct ISCPI_SENSe_VVM_REFerence * _result = 0;
    HRESULT _hr = get_REFerence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SENSe_VVM_REFerencePtr(_result, false);
}

inline ISCPI_SENSe_VVM_TABLePtr ISCPI_SENSe_VVM::GetTABLe ( ) {
    struct ISCPI_SENSe_VVM_TABLe * _result = 0;
    HRESULT _hr = get_TABLe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SENSe_VVM_TABLePtr(_result, false);
}

inline ISCPI_SENSe_VVM_DISPlayPtr ISCPI_SENSe_VVM::GetDISPlay ( ) {
    struct ISCPI_SENSe_VVM_DISPlay * _result = 0;
    HRESULT _hr = get_DISPlay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SENSe_VVM_DISPlayPtr(_result, false);
}

inline _variant_t ISCPI_SENSe_VVM::GetDATA ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DATA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface ISCPI_EVENts wrapper method implementations
//

inline VARIANT_BOOL ISCPI_EVENts::GetSTATe ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_STATe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_EVENts::PutSTATe ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_STATe(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// dispinterface ISCPI_EVENtsEvents wrapper method implementations
//

inline HRESULT ISCPI_EVENtsEvents::WAIT ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

inline HRESULT ISCPI_EVENtsEvents::MEASure ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

inline HRESULT ISCPI_EVENtsEvents::HOLD ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

inline HRESULT ISCPI_EVENtsEvents::CONNect ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

inline HRESULT ISCPI_EVENtsEvents::DISConnect ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x5, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

//
// interface ISCPI_SENSe_CORRection_COLLect_ECAL_CHECk wrapper method implementations
//

inline HRESULT ISCPI_SENSe_CORRection_COLLect_ECAL_CHECk::EXECute ( const _variant_t & Param1 ) {
    HRESULT _hr = raw_EXECute(Param1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ISCPI_SENSe_CORRection_COLLect_ECAL wrapper method implementations
//

inline ISCPI_SENSe_CORRection_COLLect_ECAL_UTHRuPtr ISCPI_SENSe_CORRection_COLLect_ECAL::GetUTHRu ( ) {
    struct ISCPI_SENSe_CORRection_COLLect_ECAL_UTHRu * _result = 0;
    HRESULT _hr = get_UTHRu(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SENSe_CORRection_COLLect_ECAL_UTHRuPtr(_result, false);
}

inline _bstr_t ISCPI_SENSe_CORRection_COLLect_ECAL::GetINFormation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_INFormation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long ISCPI_SENSe_CORRection_COLLect_ECAL::GetPATH ( long Cpt ) {
    long _result = 0;
    HRESULT _hr = get_PATH(Cpt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_CORRection_COLLect_ECAL::PutPATH ( long Cpt, long Value ) {
    HRESULT _hr = put_PATH(Cpt, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void ISCPI_SENSe_CORRection_COLLect_ECAL::PutSOLT1 ( long _arg1 ) {
    HRESULT _hr = put_SOLT1(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void ISCPI_SENSe_CORRection_COLLect_ECAL::PutSOLT2 ( const _variant_t & _arg1 ) {
    HRESULT _hr = put_SOLT2(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISCPI_SENSe_CORRection_COLLect_ECAL::GetUCHar ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UCHar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISCPI_SENSe_CORRection_COLLect_ECAL::PutUCHar ( _bstr_t Value ) {
    HRESULT _hr = put_UCHar(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ISCPI_SENSe_CORRection_COLLect_ECAL_ORIentationPtr ISCPI_SENSe_CORRection_COLLect_ECAL::GetORIentation ( ) {
    struct ISCPI_SENSe_CORRection_COLLect_ECAL_ORIentation * _result = 0;
    HRESULT _hr = get_ORIentation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SENSe_CORRection_COLLect_ECAL_ORIentationPtr(_result, false);
}

inline ISCPI_SENSe_CORRection_COLLect_ECAL_CHECkPtr ISCPI_SENSe_CORRection_COLLect_ECAL::GetCHECK ( ) {
    struct ISCPI_SENSe_CORRection_COLLect_ECAL_CHECk * _result = 0;
    HRESULT _hr = get_CHECK(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SENSe_CORRection_COLLect_ECAL_CHECkPtr(_result, false);
}

//
// interface ISCPI_SENSe_CORRection_COLLect wrapper method implementations
//

inline ISCPI_SENSe_CORRection_COLLect_ACQuirePtr ISCPI_SENSe_CORRection_COLLect::GetACQuire ( ) {
    struct ISCPI_SENSe_CORRection_COLLect_ACQuire * _result = 0;
    HRESULT _hr = get_ACQuire(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SENSe_CORRection_COLLect_ACQuirePtr(_result, false);
}

inline ISCPI_SENSe_CORRection_COLLect_CKITPtr ISCPI_SENSe_CORRection_COLLect::GetCKIT ( ) {
    struct ISCPI_SENSe_CORRection_COLLect_CKIT * _result = 0;
    HRESULT _hr = get_CKIT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SENSe_CORRection_COLLect_CKITPtr(_result, false);
}

inline ISCPI_SENSe_CORRection_COLLect_METHodPtr ISCPI_SENSe_CORRection_COLLect::GetMETHod ( ) {
    struct ISCPI_SENSe_CORRection_COLLect_METHod * _result = 0;
    HRESULT _hr = get_METHod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SENSe_CORRection_COLLect_METHodPtr(_result, false);
}

inline HRESULT ISCPI_SENSe_CORRection_COLLect::CLEar ( ) {
    HRESULT _hr = raw_CLEar();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISCPI_SENSe_CORRection_COLLect::SAVE ( ) {
    HRESULT _hr = raw_SAVE();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ISCPI_SENSe_CORRection_COLLect_DATAPtr ISCPI_SENSe_CORRection_COLLect::GetDATA ( ) {
    struct ISCPI_SENSe_CORRection_COLLect_DATA * _result = 0;
    HRESULT _hr = get_DATA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SENSe_CORRection_COLLect_DATAPtr(_result, false);
}

inline ISCPI_SENSe_CORRection_COLLect_ECALPtr ISCPI_SENSe_CORRection_COLLect::GetECAL ( ) {
    struct ISCPI_SENSe_CORRection_COLLect_ECAL * _result = 0;
    HRESULT _hr = get_ECAL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SENSe_CORRection_COLLect_ECALPtr(_result, false);
}

//
// interface ISCPI_SENSe_CORRection_EXTension_AUTO_MEASure wrapper method implementations
//

inline HRESULT ISCPI_SENSe_CORRection_EXTension_AUTO_MEASure::SHORt ( ) {
    HRESULT _hr = raw_SHORt();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISCPI_SENSe_CORRection_EXTension_AUTO_MEASure::OPEN ( ) {
    HRESULT _hr = raw_OPEN();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ISCPI_SENSe_CORRection_EXTension_AUTO wrapper method implementations
//

inline _bstr_t ISCPI_SENSe_CORRection_EXTension_AUTO::GetCONFig ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CONFig(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISCPI_SENSe_CORRection_EXTension_AUTO::PutCONFig ( _bstr_t Value ) {
    HRESULT _hr = put_CONFig(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISCPI_SENSe_CORRection_EXTension_AUTO::GetDCOFfset ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DCOFfset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_CORRection_EXTension_AUTO::PutDCOFfset ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_DCOFfset(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISCPI_SENSe_CORRection_EXTension_AUTO::GetLOSS ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LOSS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_CORRection_EXTension_AUTO::PutLOSS ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_LOSS(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ISCPI_SENSe_CORRection_EXTension_AUTO_MEASurePtr ISCPI_SENSe_CORRection_EXTension_AUTO::GetMEASure ( ) {
    struct ISCPI_SENSe_CORRection_EXTension_AUTO_MEASure * _result = 0;
    HRESULT _hr = get_MEASure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SENSe_CORRection_EXTension_AUTO_MEASurePtr(_result, false);
}

inline HRESULT ISCPI_SENSe_CORRection_EXTension_AUTO::SAVE ( ) {
    HRESULT _hr = raw_SAVE();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISCPI_SENSe_CORRection_EXTension_AUTO::RESet ( ) {
    HRESULT _hr = raw_RESet();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double ISCPI_SENSe_CORRection_EXTension_AUTO::GetSTARt ( ) {
    double _result = 0;
    HRESULT _hr = get_STARt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_CORRection_EXTension_AUTO::PutSTARt ( double Value ) {
    HRESULT _hr = put_STARt(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ISCPI_SENSe_CORRection_EXTension_AUTO::GetSTOP ( ) {
    double _result = 0;
    HRESULT _hr = get_STOP(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_CORRection_EXTension_AUTO::PutSTOP ( double Value ) {
    HRESULT _hr = put_STOP(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISCPI_SENSe_CORRection_EXTension wrapper method implementations
//

inline ISCPI_SENSe_CORRection_EXTension_PORTPtr ISCPI_SENSe_CORRection_EXTension::GetPORT ( long Pt ) {
    struct ISCPI_SENSe_CORRection_EXTension_PORT * _result = 0;
    HRESULT _hr = get_PORT(Pt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SENSe_CORRection_EXTension_PORTPtr(_result, false);
}

inline VARIANT_BOOL ISCPI_SENSe_CORRection_EXTension::GetSTATe ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_STATe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_CORRection_EXTension::PutSTATe ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_STATe(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ISCPI_SENSe_CORRection_EXTension_AUTOPtr ISCPI_SENSe_CORRection_EXTension::GetAUTO ( ) {
    struct ISCPI_SENSe_CORRection_EXTension_AUTO * _result = 0;
    HRESULT _hr = get_AUTO(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SENSe_CORRection_EXTension_AUTOPtr(_result, false);
}

//
// interface ISCPI_SENSe_CORRection wrapper method implementations
//

inline VARIANT_BOOL ISCPI_SENSe_CORRection::GetSTATe ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_STATe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISCPI_SENSe_CORRection::PutSTATe ( VARIANT_BOOL Value ) {
    HRESULT _hr = put_STATe(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ISCPI_SENSe_CORRection_COLLectPtr ISCPI_SENSe_CORRection::GetCOLLect ( ) {
    struct ISCPI_SENSe_CORRection_COLLect * _result = 0;
    HRESULT _hr = get_COLLect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SENSe_CORRection_COLLectPtr(_result, false);
}

inline HRESULT ISCPI_SENSe_CORRection::CLEar ( ) {
    HRESULT _hr = raw_CLEar();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ISCPI_SENSe_CORRection_COEFficientPtr ISCPI_SENSe_CORRection::GetCOEFficient ( ) {
    struct ISCPI_SENSe_CORRection_COEFficient * _result = 0;
    HRESULT _hr = get_COEFficient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SENSe_CORRection_COEFficientPtr(_result, false);
}

inline ISCPI_SENSe_CORRection_EXTensionPtr ISCPI_SENSe_CORRection::GetEXTension ( ) {
    struct ISCPI_SENSe_CORRection_EXTension * _result = 0;
    HRESULT _hr = get_EXTension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SENSe_CORRection_EXTensionPtr(_result, false);
}

inline ISCPI_SENSe_CORRection_IMPedancePtr ISCPI_SENSe_CORRection::GetIMPedance ( ) {
    struct ISCPI_SENSe_CORRection_IMPedance * _result = 0;
    HRESULT _hr = get_IMPedance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SENSe_CORRection_IMPedancePtr(_result, false);
}

inline _variant_t ISCPI_SENSe_CORRection::GetTYPE ( long Tr ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_TYPE(Tr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline ISCPI_SENSe_CORRection_RECeiverPtr ISCPI_SENSe_CORRection::GetRECeiver ( long Pt ) {
    struct ISCPI_SENSe_CORRection_RECeiver * _result = 0;
    HRESULT _hr = get_RECeiver(Pt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SENSe_CORRection_RECeiverPtr(_result, false);
}

inline ISCPI_SENSe_CORRection_TRANsformPtr ISCPI_SENSe_CORRection::GetTRANsform ( ) {
    struct ISCPI_SENSe_CORRection_TRANsform * _result = 0;
    HRESULT _hr = get_TRANsform(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SENSe_CORRection_TRANsformPtr(_result, false);
}

//
// interface ISCPI_SENSe wrapper method implementations
//

inline ISCPI_SENSe_AVERagePtr ISCPI_SENSe::GetAVERage ( ) {
    struct ISCPI_SENSe_AVERage * _result = 0;
    HRESULT _hr = get_AVERage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SENSe_AVERagePtr(_result, false);
}

inline ISCPI_SENSe_BANDwidthPtr ISCPI_SENSe::GetBANDwidth ( ) {
    struct ISCPI_SENSe_BANDwidth * _result = 0;
    HRESULT _hr = get_BANDwidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SENSe_BANDwidthPtr(_result, false);
}

inline ISCPI_SENSe_CORRectionPtr ISCPI_SENSe::GetCORRection ( ) {
    struct ISCPI_SENSe_CORRection * _result = 0;
    HRESULT _hr = get_CORRection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SENSe_CORRectionPtr(_result, false);
}

inline ISCPI_SENSe_FREQuencyPtr ISCPI_SENSe::GetFREQuency ( ) {
    struct ISCPI_SENSe_FREQuency * _result = 0;
    HRESULT _hr = get_FREQuency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SENSe_FREQuencyPtr(_result, false);
}

inline ISCPI_SENSe_SEGMentPtr ISCPI_SENSe::GetSEGMent ( ) {
    struct ISCPI_SENSe_SEGMent * _result = 0;
    HRESULT _hr = get_SEGMent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SENSe_SEGMentPtr(_result, false);
}

inline ISCPI_SENSe_SWEepPtr ISCPI_SENSe::GetSWEep ( ) {
    struct ISCPI_SENSe_SWEep * _result = 0;
    HRESULT _hr = get_SWEep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SENSe_SWEepPtr(_result, false);
}

inline ISCPI_SENSe_ROSCillatorPtr ISCPI_SENSe::GetROSCillator ( ) {
    struct ISCPI_SENSe_ROSCillator * _result = 0;
    HRESULT _hr = get_ROSCillator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SENSe_ROSCillatorPtr(_result, false);
}

inline ISCPI_SENSe_OFFSetPtr ISCPI_SENSe::GetOFFSet ( ) {
    struct ISCPI_SENSe_OFFSet * _result = 0;
    HRESULT _hr = get_OFFSet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SENSe_OFFSetPtr(_result, false);
}

inline ISCPI_SENSe_DATAPtr ISCPI_SENSe::GetDATA ( ) {
    struct ISCPI_SENSe_DATA * _result = 0;
    HRESULT _hr = get_DATA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SENSe_DATAPtr(_result, false);
}

inline ISCPI_SENSe_VVMPtr ISCPI_SENSe::GetVVM ( ) {
    struct ISCPI_SENSe_VVM * _result = 0;
    HRESULT _hr = get_VVM(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SENSe_VVMPtr(_result, false);
}

//
// interface ISCPI wrapper method implementations
//

inline HRESULT ISCPI::ABORt ( ) {
    HRESULT _hr = raw_ABORt();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ISCPI_CALCulatePtr ISCPI::GetCALCulate ( long Ch ) {
    struct ISCPI_CALCulate * _result = 0;
    HRESULT _hr = get_CALCulate(Ch, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_CALCulatePtr(_result, false);
}

inline ISCPI_DISPlayPtr ISCPI::GetDISPlay ( ) {
    struct ISCPI_DISPlay * _result = 0;
    HRESULT _hr = get_DISPlay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_DISPlayPtr(_result, false);
}

inline ISCPI_IEEE4882Ptr ISCPI::GetIEEE4882 ( ) {
    struct ISCPI_IEEE4882 * _result = 0;
    HRESULT _hr = get_IEEE4882(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_IEEE4882Ptr(_result, false);
}

inline ISCPI_INITiatePtr ISCPI::GetINITiate ( long Ch ) {
    struct ISCPI_INITiate * _result = 0;
    HRESULT _hr = get_INITiate(Ch, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_INITiatePtr(_result, false);
}

inline ISCPI_MMEMoryPtr ISCPI::GetMMEMory ( ) {
    struct ISCPI_MMEMory * _result = 0;
    HRESULT _hr = get_MMEMory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_MMEMoryPtr(_result, false);
}

inline ISCPI_SENSePtr ISCPI::GetSENSe ( long Ch ) {
    struct ISCPI_SENSe * _result = 0;
    HRESULT _hr = get_SENSe(Ch, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SENSePtr(_result, false);
}

inline ISCPI_SOURcePtr ISCPI::GetSOURce ( long Ch ) {
    struct ISCPI_SOURce * _result = 0;
    HRESULT _hr = get_SOURce(Ch, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SOURcePtr(_result, false);
}

inline ISCPI_SYSTemPtr ISCPI::GetSYSTem ( ) {
    struct ISCPI_SYSTem * _result = 0;
    HRESULT _hr = get_SYSTem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SYSTemPtr(_result, false);
}

inline ISCPI_TRIGgerPtr ISCPI::GetTRIGger ( ) {
    struct ISCPI_TRIGger * _result = 0;
    HRESULT _hr = get_TRIGger(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_TRIGgerPtr(_result, false);
}

inline ISCPI_STATusPtr ISCPI::GetSTATus ( ) {
    struct ISCPI_STATus * _result = 0;
    HRESULT _hr = get_STATus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_STATusPtr(_result, false);
}

inline ISCPI_OUTPutPtr ISCPI::GetOUTPut ( ) {
    struct ISCPI_OUTPut * _result = 0;
    HRESULT _hr = get_OUTPut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_OUTPutPtr(_result, false);
}

inline ISCPI_HCOPyPtr ISCPI::GetHCOPy ( ) {
    struct ISCPI_HCOPy * _result = 0;
    HRESULT _hr = get_HCOPy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_HCOPyPtr(_result, false);
}

inline ISCPI_SERVicePtr ISCPI::GetSERVice ( ) {
    struct ISCPI_SERVice * _result = 0;
    HRESULT _hr = get_SERVice(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_SERVicePtr(_result, false);
}

inline ISCPI_EVENtsPtr ISCPI::GetEVENts ( ) {
    struct ISCPI_EVENts * _result = 0;
    HRESULT _hr = get_EVENts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPI_EVENtsPtr(_result, false);
}

//
// interface ITR1300 wrapper method implementations
//

inline ISCPIPtr ITR1300::GetSCPI ( ) {
    struct ISCPI * _result = 0;
    HRESULT _hr = get_SCPI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPIPtr(_result, false);
}

inline ITR1300Ptr ITR1300::GetApplication ( ) {
    struct ITR1300 * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITR1300Ptr(_result, false);
}

inline _bstr_t ITR1300::GetNAME ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NAME(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL ITR1300::GetReady ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Ready(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ITR1300::GetSERial ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SERial(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface ITR5048 wrapper method implementations
//

inline ISCPIPtr ITR5048::GetSCPI ( ) {
    struct ISCPI * _result = 0;
    HRESULT _hr = get_SCPI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPIPtr(_result, false);
}

inline ITR5048Ptr ITR5048::GetApplication ( ) {
    struct ITR5048 * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITR5048Ptr(_result, false);
}

inline _bstr_t ITR5048::GetNAME ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NAME(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL ITR5048::GetReady ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Ready(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ITR5048::GetSERial ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SERial(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface ITR7530 wrapper method implementations
//

inline ISCPIPtr ITR7530::GetSCPI ( ) {
    struct ISCPI * _result = 0;
    HRESULT _hr = get_SCPI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPIPtr(_result, false);
}

inline ITR7530Ptr ITR7530::GetApplication ( ) {
    struct ITR7530 * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITR7530Ptr(_result, false);
}

inline _bstr_t ITR7530::GetNAME ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NAME(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL ITR7530::GetReady ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Ready(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ITR7530::GetSERial ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SERial(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface ITRVNA wrapper method implementations
//

inline ISCPIPtr ITRVNA::GetSCPI ( ) {
    struct ISCPI * _result = 0;
    HRESULT _hr = get_SCPI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISCPIPtr(_result, false);
}

inline ITRVNAPtr ITRVNA::GetApplication ( ) {
    struct ITRVNA * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITRVNAPtr(_result, false);
}

inline _bstr_t ITRVNA::GetNAME ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NAME(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL ITRVNA::GetReady ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Ready(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ITRVNA::GetSERial ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SERial(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}
